
@model DSRCManagementSystem.Models.Projects
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>AddNew</title>
    <style>
        textarea {
            resize: none;
        }

        .btn_Delete {
            float: right;
                margin-right: 10px;
        }

        .ProjectPlanDiv {
            display: none;
            margin-left: 1px;
        }

        .dropdown-menu {
    background-color: white;
}  

       
    </style>
    <link href="../../Content/Template/js/select2/select2-bootstrap.css" rel="stylesheet"
          type="text/css" />
    <link href="../../Content/Template/js/select2/select2.css" rel="stylesheet" type="text/css" />
    <link href="../../Content/Template/js/jquery-ui/css/no-theme/jquery-ui-1.10.3.custom.min.css"
          rel="stylesheet" type="text/css" />
    <script src="../../Content/JS/date.js" type="text/javascript"></script>
    <link href="../../Content/Template/css/custom.css" rel="stylesheet" type="text/css" />
    <script src="../../Content/Template/js/bootstrap-datepicker.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            $("#StartDateTime").val('');
            $("#EndDateTime").val('');
            $(".datetimepicker").datepicker({
                format: 'dd-mm-yyyy',
                todayHighlight: true,
                daysOfWeekDisabled: [0, 6],
                autoclose: true,
                startDate: '1d'
            });
        });
    </script>
</head>
<body>
    @using (Html.BeginForm("AddNew", "ViewAllProjects", FormMethod.Post))
    {
        <div class="modal-content">
            <div class="modal-header" style="background-color: #f0f0f1;">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                    ×
                </button>
                <h4 class="modal-title">
                    Add Project
                </h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12" style="text-align: right">
                        @Html.Label("*", new { @style = "color:#FF0000" }) Required field(s)
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(x => x.ProjectName, new { @class = "control-label" })
                            @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                            @Html.TextBoxFor(x => x.ProjectName, new { @id = "ProjectName", @name = "ProjectName", @class = "form-control", @placeholder = Resources.Resource.DN_ProjectModel_ProjectName, @autocomplete = "off", @maxlength = 100 })
                            @Html.ValidationMessageFor(X => X.ProjectName, null, new { @style = "color:red" })
                            <span id="spnProjectName_ID" style="color: Red;"></span>
                             <span id="spnProjectName_Error" style="color: Red;"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(x => x.ProjectCode, new { @class = "control-label" })
                            @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                            @Html.TextBoxFor(x => x.ProjectCode, new { @id = "ProjectCode", @name = "ProjectCode", @class = "form-control", @placeholder = Resources.Resource.DN_ProjectModel_ProjectCode, @autocomplete = "off", @maxlength = 50, @style = "height:42px; !important" })
                            @Html.ValidationMessageFor(X => X.ProjectCode, null, new { @style = "color:red" })
                             <span id="spnProjectCode_ID" style="color: Red;"></span>
                        </div>
                    </div>




                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(x => x.ProjectType, new { @class = "control-label" })
                            @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                            @Html.DropDownList("ProjectType", ViewBag.ProjectTypeList as SelectList, new { @id = "ProjectTypeID", @name = "ProjectType", @class = "form-control", @maxlength = 50, @style = "height:42px; !important" })
                            @Html.ValidationMessageFor(X => X.ProjectType, null, new { @style = "color:red" })
                            <span id="spnProjectType_ID" style="color: Red;"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Managed By", new { @class = "control-label" })
                           @Html.DropDownList("Id3", ViewBag.Leaders as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple", @maxlength = 50, @style = "height:42px; !important" })
                           
                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Project Start Date", new { @class = "control-label" })
                            @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                            @Html.TextBoxFor(x => x.StartDateTime, new { @id = "StartDateTime", @class = "form-control datetimepicker", @data_start_date = "d", @autocomplete = "off" })
                            <span class="add-on"><i class="icon-remove"></i></span><span class="add-on">
                                <i class="icon-th">
                                </i>
                            </span><span id="spnStartDateTime_ID" style="color: Red;"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.Label("Project End Date", new { @class = "control-label" })
                            @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                            @Html.TextBoxFor(x => x.EndDateTime, new { @id = "EndDateTime", @class = "form-control datetimepicker", @autocomplete = "off" })
                            <span class="add-on"><i class="icon-remove"></i></span><span class="add-on">
                                <i class="icon-th">
                                </i>
                            </span><span id="spnEndDateTime_ID" style="color: Red;"></span>
                        </div>
                    </div>
                    <label id="lblProjectinfo" style="color:red;margin-left: 20px;"></label>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(x => x.ProjectDescription, new { @class = "control-label" })
                            @Html.TextAreaFor(x => x.ProjectDescription, new { @id = "ProjectDescription", @name = "ProjectDescription", @class = "form-control", @placeholder = Resources.Resource.DN_ProjectModel_ProjectDescription, @autocomplete = "off", @style = "height:100px", @maxlength = 1000 })
                        </div>
                    </div>
                </div>


                <div class="row" style="margin-left:1px;">
                    <div class="col-md-3">
                        @Html.Label("Project Plan", new { @class = "control-label" })
                         @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                    </div>
                    <div class="col-md-3">
                        @Html.Label("Start Date", new { @class = "control-label" })
                         @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                    </div>
                    <div class="col-md-3">
                        @Html.Label("End Date", new { @class = "control-label" })
                         @Html.Label("  *", new { @style = "color:red;font-weight:bold;" })
                    </div>
                </div>
                    <div class="row">
                        @{
        int count = Convert.ToInt16(ViewData["Phasecount"]);

        for (int i = 0; i < count; i++)
        {
            string ProjectPlandivId = "ProjectPlandivId_" + i;
            string PhaseName = "PhaseName_" + i;
            string StartDate = "StartDate_" + i;
            string EndDate = "EndDate_" + i;

            if (i == 0) { 
                <div class="row ProjectPlanDiv" id=@ProjectPlandivId style="display:block">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.DropDownList(PhaseName, ViewBag.ProjectPlan as SelectList, "select", new { @class = "select2-container  select2 visible" })
                            @*@Html.HiddenFor(o => o.ProjectPlan5)*@
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">

                            @Html.TextBox(StartDate, string.Empty, new { @class = "form-control datetimepicker", @autocomplete = "off",@style = "height:42px; !important" })
                            <span id="StartDateTime5_ID" style="color: Red;"></span>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">

                            @Html.TextBox(EndDate, string.Empty, new { @class = "form-control datetimepicker", @autocomplete = "off",@style = "height:42px; !important" })
                            <span id="EndDateTime5_ID" style="color: Red;"></span>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <button type="button" class="btn btn-danger btn_Delete ">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row ProjectPlanDiv" id=@ProjectPlandivId style="display:none">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.DropDownList(PhaseName, ViewBag.ProjectPlan as SelectList, "select", new { @class = "select2-container  select2 visible" })
                            @*@Html.HiddenFor(o => o.ProjectPlan5)*@
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">

                            @Html.TextBox(StartDate, string.Empty, new { @class = "form-control datetimepicker", @autocomplete = "off",@style = "height:42px; !important"  })
                            <span id="StartDateTime5_ID" style="color: Red;"></span>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">

                            @Html.TextBox(EndDate, string.Empty, new { @class = "form-control datetimepicker", @autocomplete = "off",@style = "height:42px; !important"  })
                            <span id="EndDateTime5_ID" style="color: Red;"></span>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <div class="form-group">
                            <button type="button" class="btn btn-danger btn_Delete ">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
}
                        <div class="row" >
                            @*<button type="button" id="btn_SamplePhase" class="btn btn-info" style="float:right; margin:20px;">Sample</button>*@
                            <label id="lblinfor" style="color:red;margin-left: 40px;"></label>
                            <button type="button" id="btn_AddPhase" class="btn btn-info" style="float:right; margin-right: 38px;">Add</button>
                        </div>
                    </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Technologies", new { @class = "control-label" })
                            @Html.DropDownList("TechList", ViewBag.Tech as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple" })
                            @Html.HiddenFor(o => o.TechList)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Object Relation Mapping", new { @class = "control-label" })
                            @Html.DropDownList("ORMList", ViewBag.ORM as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple" })
                            @Html.HiddenFor(o => o.ORMList)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Database", new { @class = "control-label" })
                            @Html.DropDownList("DBList", ViewBag.DB as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple" })
                            @Html.HiddenFor(o => o.DBList)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Third Party Tools", new { @class = "control-label" })
                            @Html.DropDownList("ThirdPartyList", ViewBag.ThirdParty as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple" })
                            @Html.HiddenFor(o => o.ThirdPartyList)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.Label("Source Controls Tools", new { @class = "control-label" })
                            @Html.DropDownList("SourceControlsList", ViewBag.SourceControl as MultiSelectList, new { @class = "select2-container select2-container-multi select2 visible", @multiple = "multiple" })
                            @Html.HiddenFor(o => o.SourceControlList)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(x => x.SvnRepositoryUrl, new { @class = "control-label" })
                            @*@Html.Label("  *", new { @style = "color:red;font-weight:bold;" })*@
                            @Html.TextBoxFor(x => x.SvnRepositoryUrl, new { @id = "SvnRepositoryUrl", @name = "SvnRepositoryUrl", @class = "form-control", @placeholder = Resources.Resource.DN_ProjectModel_SvnRepositoryUrl, @autocomplete = "off", @maxlength = 100 })
                            @*@Html.ValidationMessageFor(X => X.SvnRepositoryUrl, null, new { @style = "color:red" })*@
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBoxFor(a => a.IsActive.Value, new { @id = "IsActive", @name = "IsActivedi" })IsActive
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    Cancel
                </button>
                <button type="button" id="btnAdd" class="btn btn-info" onclick="AddNew1()">
                    Save
                </button>
            </div>
        </div>
        <div class="modal fade in" id="portlet-config1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="tools">
                    <div id="PartialSection">
                        <div id="LoaderContent" style="height: 100%;">
                            <img src="../../Content/Template/images/finalloader.GIF" style="margin-left: 43%;
                            margin-top: 50%;" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    <script src="../../Content/Template/js/select2/select2.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(function () {
            $(".modal-body select").select2({
                minimumResultsForSearch: -1
            });
        });
        var opts = {
            "closeButton": true,
            "debug": false,
            "positionClass": "toast-top-right",
            "toastClass": "White",
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        $("#ProjectDescription").on('paste keypress', (function (e) {
            var key;
            if (e.which && e.which != 1) {
                key = String.fromCharCode(e.which);
            } else {
                if (window.clipboardData && window.clipboardData.getData) { // IE
                    key = window.clipboardData.getData('Text');
                }
                else if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.getData) { // other browsers
                    key = e.originalEvent.clipboardData.getData('text/plain');
                }
                //key = e.clipboardData.getData('Text');
            }
            var value = $(this).val() + key;
            if (!/^(\w|\s|\d|\.|\,|")*?$/.test(value)) {
                e.preventDefault();
            }
        }));
        function AddNew1(event) {
            $("#spnProjectName_Error").text('');
            var ProjectName = $('#ProjectName').val().replace(/\s/g, "").length;
            var ProjectCode = $('#ProjectCode').val().replace(/\s/g, "").length;
            var ProjectType = $("#ProjectTypeID").find("option:selected").prop("value");
            var ProjectStartDate = $('#StartDateTime').val();
            var ProjectEndDate = $('#EndDateTime').val();
            $("#spnStartDateTime_ID").text('');
            $("#spnEndDateTime_ID").text('');
            $("#spnProjectName_ID").text('');
            $("#spnProjectCode_ID").text('');
            $("#spnProjectType_ID").text('');
            val = /^[a-zA-Z][a-zA-Z0-9\s_]*$/;
            var IsError = true;

            if (document.getElementById('ProjectName').value != '' && !val.test(document.getElementById('ProjectName').value)) {
                alert(!val.test(document.getElementById('ProjectName').value));
                $("#spnProjectName_Error").text('Invalid Project Name');
                IsError = false;
            }

            if (ProjectName == "" || ProjectCode == "" || ProjectType == "0") {
                if (ProjectName == "")
                    $("#spnProjectName_ID").text('Enter Project Name');
                else
                    $("#spnProjectName_ID").text('');
                if (ProjectCode == "")
                    $("#spnProjectCode_ID").text('Enter Project Code');
                else
                    $("#spnProjectCode_ID").text('');
                if (ProjectType == "0")
                    $("#spnProjectType_ID").text('Select Project Type');
                else
                    $("#spnProjectType_ID").text('');

            }
            else if (ProjectType == "1") {
                if (ProjectStartDate == "") {
                    $("#spnStartDateTime_ID").text('Project Start Date is Mandatory for Fixed Project');
                    IsError = false;
                }
                if (ProjectEndDate == "") {
                    $("#spnEndDateTime_ID").text('Project End Date is Mandatory for Fixed Project');
                    IsError = false;
                }
            }
            if (ProjectStartDate != "" && ProjectEndDate != "") {
                var dateFromParts = ProjectStartDate.split("-");
                var fromDate = new Date(dateFromParts[2], dateFromParts[1] - 1, dateFromParts[0]);
                var dateToParts = ProjectEndDate.split("-");
                var toDate = new Date(dateToParts[2], dateToParts[1] - 1, dateToParts[0]);
                if (fromDate >= toDate) {
                    $("#spnEndDateTime_ID").html('To date must be greater than the From date');
                    IsError = false;
                }
            }
            var input = $("input");
            var container = $(".select2-container");

            function NewPhase(phaseName, startDate, endDate) {
                this.PhaseName = phaseName;
                this.StartDate = startDate;
                this.EndDate = endDate;
            }
            var Milestone = [];
            var PhaseNames = [];

            if (ProjectStartDate == "" || ProjectEndDate == "") {
                if (ProjectStartDate == "") {
                    $("#spnStartDateTime_ID").text('Select Start Date');
                    IsError = false;
                }
                if (ProjectEndDate == "") {
                    $("#spnEndDateTime_ID").text('Select End Date');
                    IsError = false;
                }

                event.stopPropagation();
            } else {
                $("#lblProjectinfo").text('');
                var PreviousEndDate = ProjectStartDate;
            }

            $(".ProjectPlanDiv").each(function () {
                //Get the values from only visible items.
                if (this.style.display == "block") {
                    var inputsArray = $(this).find(input);
                    var selectArray = $(this).find(container);

                    var PhaseName;
                    var StartDate, EndDate;
                    PhaseName = "";
                    StartDate = EndDate = "";

                    selectArray.each(function () {
                        var Id = this.id;
                        if (Id.indexOf("s2id_PhaseName_") >= 0) {
                            PhaseName = $(this).text();
                        }
                    });

                    inputsArray.each(function () {
                        //substring detection for exact ID and values
                        var Id = this.id;
                        if (Id.indexOf("StartDate_") >= 0) {
                            StartDate = this.value;
                        }
                        if (Id.indexOf("EndDate_") >= 0) {
                            EndDate = this.value;
                        }

                    });

                    if (PhaseName != "" && StartDate != "" && EndDate != "") {


                        var splitedStartDate = StartDate.split("-");
                        var splitedEndDate = EndDate.split("-");
                        var splitedProjectStartDate = ProjectStartDate.split("-");
                        var splitedProjectEndDate = ProjectEndDate.split("-");
                        var splitedPreviousEndDate = PreviousEndDate.split("-");

                        var startDateTime = new Date(splitedStartDate[2], splitedStartDate[1] - 1, splitedStartDate[0]);

                        var endDateTime = new Date(splitedEndDate[2], splitedEndDate[1] - 1, splitedEndDate[0]);

                        var ProjectStartDateTime = new Date(splitedProjectStartDate[2], splitedProjectStartDate[1] - 1, splitedProjectStartDate[0]);

                        var ProjectEndDateTime = new Date(splitedProjectEndDate[2], splitedProjectEndDate[1] - 1, splitedProjectEndDate[0]);

                        var PreviousEndDateTime = new Date(splitedPreviousEndDate[2], splitedPreviousEndDate[1] - 1, splitedPreviousEndDate[0]);

                        for (var i = 0; i < PhaseNames.length; i++) {
                            if (PhaseNames[i].indexOf(PhaseName) >= 0) {
                                $("#lblinfor").text("* Same phase has selected more than once");
                                event.stopPropagation();
                                return false;
                            }
                        }
                        PhaseNames.push(PhaseName);
                        if (PreviousEndDateTime > startDateTime) {
                            $("#lblinfor").text(" * Given Phase Start Date is invalid");
                            event.stopPropagation();
                        }
                        else if (startDateTime > ProjectEndDateTime) {
                            $("#lblinfor").text(" * Start date should not be greater than Project End Date");
                            event.stopPropagation();
                        }
                        else if (endDateTime < startDateTime) {
                            $("#lblinfor").text(" * Given Phase End Date is invalid");
                            event.stopPropagation();
                        }
                        else if (endDateTime < ProjectStartDateTime) {
                            $("#lblinfor").text(" * End date should not be Lesser than Project Start Date");
                            event.stopPropagation();
                        }
                        else if (endDateTime > ProjectEndDateTime) {
                            $("#lblinfor").text(" * Given phase End Date is invalid");
                            event.stopPropagation();
                        }
                        else {
                            $("#lblinfor").text("");
                        }
                        Milestone.push(PhaseName + "," + StartDate + "," + EndDate)
                        //Milestone.push(NewPhase(PhaseName, StartDate, EndDate));
                    } else {

                        if (StartDate == "" && EndDate == "" && PhaseName == "select") {
                            $("#lblinfor").text("* Please fill all the Phase related information properly");
                            event.stopPropagation();
                        }

                        if (PhaseName.trim() == "select") {
                            $("#lblinfor").text("* Please select the Phase");
                            event.stopPropagation();
                        }

                        if (StartDate == "" || EndDate == "") {
                            $("#lblinfor").text(" * Please fill the Date value");
                            event.stopPropagation();
                        }

                    }

                }
                PreviousEndDate = EndDate;
            });

            $.each(Milestone, function (key, value) {
                console.log(key, value);
            });

            if (IsError) {
                $('#portlet-config1').appendTo("body").modal({ backdrop: 'static', keyboard: false });
                var AttendeeId = "";
                if ($("#Id3").val() != "" && $("#Id3").val() != null) {
                    AttendeeId = $("#Id3").val().toString();
                }
                else {
                    AttendeeId = "";
                }

                $("#lblinfor").text('');

                var values =
                {
                    "ProjectName": $("#ProjectName").val(),
                    "ProjectCode": $("#ProjectCode").val(),
                    "ProjectType": $("#ProjectTypeID").find("option:selected").prop("value"),
                    "ProjectDescription": $("#ProjectDescription").val(),
                    "SvnRepositoryUrl": $("#SvnRepositoryUrl").val(),
                    "IsActive": $("#IsActive").is(":checked"),
                    "TechList1": $("#TechList").val(),
                    "ORMList1": $("#ORMList").val(),
                    "DBList1": $("#DBList").val(),
                    "ManagedResources": AttendeeId,
                    "ThirdPartyList1": $("#ThirdPartyList").val(),
                    "SourceControlsList1": $("#SourceControlsList").val(),
                    "StartDateTime": $("#StartDateTime").val(),
                    "EndDateTime": $("#EndDateTime").val(),
                    "Phases": Milestone

                };
                $.ajax({
                    url: "../../ViewAllProjects/AddNew/",
                    type: 'POST',
                    cache: false,
                    traditional: true,
                    data: values,
                    success: function (result) {
                        if (result == true) {
                            //                        $('#portlet-config').modal('hide');
                            //                        setTimeout(function () {
                            //                            toastr.success("Project has been added sucessfully.", opts);
                            //                        }, 0);
                            //                        setTimeout(function () { // wait 2 seconds and reload
                            //                            window.location.reload(true);
                            //                        }, 1000);
                            $("#portlet-config").modal("hide");
                            setTimeout(function () { location.reload(); }, 1000);
                            toastr.success("Project has been added sucessfully.", opts);

                        }
                        else {
                            $('#PartialSection').html(result);
                            $('#portlet-config').appendTo("body").modal('show');
                        }
                    }
                });
            }
        }

        $(document).ready(function () {
            $(".btn_Delete").click(function () {

                $(this).parent().parent().parent().find($("input")).each(function () {
                    $(this).val('');

                });

                //$(this).parent().parent().parent().find($(".select2-container")).each(function () {
                
                //    if (this.id.indexOf("s2id_PhaseName_") >= 0) {
                //        this.value="select";
                //    }
                //});

                $(this).parent().parent().parent().hide();
            });
            $("#btn_AddPhase").click(function () {
                $(".ProjectPlanDiv").each(function () {
                    if (this.style.display == "none") {
                        this.style.display = "block";
                        return false;
                    }
                });
            });

            $("#btn_SamplePhase").click(function () {

            });
        });

    </script>
</body>
</html>
