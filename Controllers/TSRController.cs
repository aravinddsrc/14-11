
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using DSRCManagementSystem.Models;
using System.Web.SessionState;
using System.Net.Mail;
using DSRCManagementSystem;
using System.Net;
using System.Web.Security;
using System.Text.RegularExpressions;
using DSRCManagementSystem.Models.Domain_Models;
using System.Data.Objects;
using System.Data.Objects.SqlClient;
using System.Management;
using System.Globalization;
using System.Threading.Tasks;
using DSRCManagementSystem.DSRCLogic;
using System.Web.Configuration;
using System.IO;
using System.Data.SqlClient;
using System.Data;
using NPOI.HSSF.UserModel;
using NPOI.SS.UserModel;
namespace DSRCManagementSystem.Controllers
{
    public class TSRController : Controller
    {
        //
        // GET: /TSR/

        public ActionResult Index()
        {
            return View();
        }


        // Getting Grid By Ramesh

        [HttpGet]
        public ActionResult AddPhase()
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            List<DSRCManagementSystem.Models.AddPhase> objphase = new List<DSRCManagementSystem.Models.AddPhase>();
            try
            {
                //var value = objdb.ProjectPhases.Where(x => x.EndDate < System.DateTime.Now).Select(o => o).ToList();

                //foreach (var item in value)
                //{
                //    item.IsOpen = false;
                //    objdb.SaveChanges();
                //}

                var userId = (int)Session["UserId"];


                //objphase = (from p in objdb.ProjectPhases.Where(x => x.IsACTIVE == true && x.UserID == userId)
                //            join t in objdb.PhaseStatus on p.PhaseStatus equals t.PhaseStatusId
                //            join u in objdb.Projects on p.ProjectID equals u.ProjectID
                //            select new DSRCManagementSystem.Models.AddPhase
                //            {
                //                PhaseId = p.ProjectPhaseId,
                //                StartDate = p.StartDate,
                //                EndTime = p.EndDate,
                //                PhaseName = p.Phase,
                //                PhaseStatus = t.PhaseStatusName,
                //                ProjectName = u.ProjectName,
                //                NumberOfEfforts = p.NoOfEfforts
                //            }).OrderBy(x => x.StartDate).ToList();

                var projects = objdb.ProjectPhases.Where(o => o.UserID == userId).Select(o => o.ProjectID).ToList();





                objphase = (from p in objdb.ProjectPhases.Where(x => x.IsACTIVE == true && projects.Contains(x.ProjectID))
                            join t in objdb.Master_PhaseStatus on p.PhaseStatus equals t.PhaseStatusId
                            join u in objdb.Projects on p.ProjectID equals u.ProjectID
                            select new DSRCManagementSystem.Models.AddPhase
                            {
                                PhaseId = p.ProjectPhaseId,
                                StartDate = p.StartDate,
                                EndTime = p.EndDate,
                                PhaseName = p.Phase,
                                PhaseStatus = t.PhaseStatusName,
                                ProjectName = u.ProjectName,
                                NumberOfEfforts = p.NoOfEfforts
                            }).OrderByDescending(x => x.StartDate).ToList();



                foreach (var item in objphase)
                {
                    var Assignedlist = objdb.TS_Task.Where(x => x.PhaseNameId == item.PhaseId && x.IsDelete == false).Select(o => o).FirstOrDefault();
                    if (Assignedlist != null)
                    {
                        item.alreadyassigned = 1;
                    }
                    else
                    {

                        item.alreadyassigned = 0;
                    }

                }


            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(objphase);

        }

        // Add New Phase Pop-Up BY Ramesh

        [HttpGet]
        public ActionResult AddNewPhase()
        {
            var userId = (int)Session["UserId"];
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();

            try
            {
                // Load All Projects  Respect To Login

                var obj = (from p in objdb.UserProjects.Where(x => x.UserID == userId)
                           join t in objdb.Projects.Where(x => x.IsDeleted == false || x.IsDeleted == null) on p.ProjectID equals t.ProjectID
                           select new
                           {
                               ProjectId = p.ProjectID,
                               ProjectName = t.ProjectName
                           }).OrderBy(x => x.ProjectName).ToList();


                // Load All PhaseStatus
                var value = (from p in objdb.Master_PhaseStatus
                             select new
                             {
                                 PhaseStatusId = p.PhaseStatusId,
                                 PhaseStatusName = p.PhaseStatusName
                             }).OrderBy(x => x.PhaseStatusName).ToList();

                ViewBag.ProjectList = new SelectList(obj, "ProjectId", "ProjectName");
                ViewBag.PhaseName = new SelectList(value, "PhaseStatusId", "PhaseStatusName");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }



        [HttpPost]
        public ActionResult AddNewPhase(AddPhase objphase)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.ProjectPhase project = new DSRCManagementSystem.ProjectPhase();
            try
            {
                var userId = (int)Session["UserId"];
                int i = Convert.ToInt32(objphase.ProjectName);
                int status = Convert.ToInt32(objphase.PhaseStatus);

                //giving already message in same days

                var same = objdb.ProjectPhases.Where(x => x.PhaseStatus == status && x.ProjectID == i && x.Phase == objphase.PhaseName && x.IsACTIVE == true).Select(o => o).FirstOrDefault();
                var phase = objdb.ProjectPhases.Where(x => x.Phase == objphase.PhaseName && x.ProjectID == i && x.IsACTIVE == true).Select(o => o).FirstOrDefault();
                if (same != null || phase != null)
                {
                    return Json(new { Result = "AlreadySame", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                }

                var already = objdb.ProjectPhases.Where(x => x.StartDate == objphase.StartDate && x.EndDate == objphase.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.Phase == objphase.PhaseName).Select(o => o).FirstOrDefault();

                //giving already message for between days where enddate == entered d date

                var alreadyall = objdb.ProjectPhases.Where(x => x.StartDate < objphase.StartDate && x.EndDate <= objphase.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.Phase == objphase.PhaseName).Select(o => o).FirstOrDefault();

                //giving already message for between days where startdate == entered start date

                var startalready = objdb.ProjectPhases.Where(x => x.StartDate <= objphase.StartDate && x.EndDate < objphase.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.Phase == objphase.PhaseName).Select(o => o).FirstOrDefault();

                var Already = objdb.ProjectPhases.Where(x => x.StartDate < objphase.StartDate && x.EndDate < objphase.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.Phase == objphase.PhaseName).Select(o => o).FirstOrDefault();


                var alreadyphase = objdb.ProjectPhases.Where(x => x.Phase == objphase.PhaseName && x.ProjectID == i && x.IsACTIVE == true).Select(o => o).FirstOrDefault();
                //  var alreadyphase = objdb.ProjectPhases.Where(x => x.StartDate == objphase.StartDate && x.EndDate == objphase.EndTime && x.ProjectID == i && x.PhaseStatus != status && x.IsACTIVE ==true).Select(o => o).FirstOrDefault();
                //var alreadyphaseall = objdb.ProjectPhases.Where(x => x.StartDate < objphase.StartDate && x.EndDate < objphase.EndTime && x.ProjectID == i && x.PhaseStatus != status && x.IsACTIVE ==true).Select(o => o).FirstOrDefault();

                if (already != null || alreadyall != null || startalready != null || Already != null || alreadyphase != null)
                {
                    return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                }
                project.ProjectID = Convert.ToInt32(objphase.ProjectName);
                project.PhaseStatus = Convert.ToInt32(objphase.PhaseStatus);
                project.CreatedDate = System.DateTime.Now;
                project.StartDate = objphase.StartDate;
                project.EndDate = objphase.EndTime;
                project.NoOfEfforts = objphase.NumberOfEfforts;
                project.Phase = objphase.PhaseName;
                project.IsACTIVE = true;
                project.UserID = userId;
                project.IsOpen = true;
                objdb.AddToProjectPhases(project);
                objdb.SaveChanges();
                System.Web.HttpContext.Current.Application["Addnewphase"] = "1";
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
        }


        //getting new phase edit popup
        [HttpGet]
        public ActionResult AddNewPhaseEdit(int Id, AddPhaseEdit objmodel)
        {
            var userId = (int)Session["UserId"];
            DSRCManagementSystem.Models.AddPhaseEdit objedit = new DSRCManagementSystem.Models.AddPhaseEdit();
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {

                objedit = (from p in objdb.ProjectPhases.Where(x => x.ProjectPhaseId == Id && x.IsACTIVE == true && x.UserID == userId)
                           join t in objdb.Master_PhaseStatus on p.PhaseStatus equals t.PhaseStatusId
                           select new DSRCManagementSystem.Models.AddPhaseEdit
                           {
                               StatusId = t.PhaseStatusId,
                               PhaseId = p.ProjectPhaseId,
                               StartDate = p.StartDate,
                               EndTime = p.EndDate,
                               PhaseName = p.Phase,
                               PhaseStatus = p.PhaseStatus,
                               ProjectName = p.ProjectID,
                               NumberOfEfforts = p.NoOfEfforts,
                               open = p.IsOpen
                           }).FirstOrDefault();


                var val = Convert.ToString(objedit.StatusId);
                //  objedit.Start = Convert.ToString(objedit.PhaseStatus);
                //  objedit.ProjectId = Convert.ToString(objedit.ProjectName);

                DateTime d1 = Convert.ToDateTime(objedit.StartDate);
                string d = d1.ToShortDateString();
                objedit.Start = d;

                DateTime d2 = Convert.ToDateTime(objedit.EndTime);
                string d3 = d2.ToShortDateString();
                objedit.End = d3;


                var obj = (from p in objdb.UserProjects.Where(x => x.UserID == userId)
                           join t in objdb.Projects on p.ProjectID equals t.ProjectID
                           select new
                           {
                               ProjectId = p.ProjectID,
                               ProjectName = t.ProjectName
                           }).ToList();

                var value = (from p in objdb.Master_PhaseStatus
                             select new
                             {
                                 PhaseStatusId = p.PhaseStatusId,
                                 PhaseStatusName = p.PhaseStatusName
                             }).ToList();

                var openclose = (from p in objdb.Master_IsOpen
                                 select new
                                 {
                                     ID = p.StatusId,
                                     IsopenStatus = p.Status
                                 }).ToList();
                var openstate = (from p in objdb.Master_openclose
                                 select new
                                 {

                                     OpenId = p.StateId,
                                     Openstate = p.State

                                 }).ToList();

                if (objedit.open == true)
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate", "1");
                }

                else if (objedit.open == false)
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate", "2");
                }

               //if (objedit.EndTime > System.DateTime.Now)
                //{
                //    ViewBag.IsOpen = new SelectList(openclose, "StatusId", "Status", "i");
                //}
                //else if (objedit.EndTime < System.DateTime.Now)
                //{
                //    ViewBag.IsOpen = new SelectList(openclose, "StatusId", "Status", "j");
                //}
                else
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate");
                }



                ViewBag.ProjectList = new SelectList(obj, "ProjectId", "ProjectName", objedit.ProjectName);
                ViewBag.PhaseName = new SelectList(value, "PhaseStatusId", "PhaseStatusName", objedit.StatusId);
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(objedit);
        }

        //updating data using edit popup
        [HttpPost]
        public ActionResult AddNewPhaseEdit(AddPhaseEdit objedit)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.ProjectPhaseLog objlog = new DSRCManagementSystem.ProjectPhaseLog();
            try
            {
                var userId = (int)Session["UserId"];
                int i = Convert.ToInt32(objedit.ProjectName);
                int status = Convert.ToInt32(objedit.PhaseStatus);
                DateTime startdate;
                DateTime enddate;

                //startdate = (DateTime)db.ProjectPhases.FirstOrDefault(x => x.Phase == PhaseName).StartDate;
                //enddate = (DateTime)db.ProjectPhases.FirstOrDefault(x => x.Phase == PhaseName).EndDate;


                //var Value = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId && x.ISACTIVE==true).Select(o => o).FirstOrDefault();

                //if (Value != null)
                //{
                //    startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                //    enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                //    string start = startdate.ToString("dd/MM/yyyy");
                //    string end = enddate.ToString("dd/MM/yyyy");

                //    bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                //               && EntityFunctions.TruncateTime(x.EndDATE) < EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;
                //    if (!overlapping)
                //    {
                //        var result = new { message = "timeexceed", sdate = start, edate = end };
                //        return Json(new { message = "timeexceed", sdate = start, edate = end });
                //    }


                //}


                //getting row with respect to the projectphaseid
                var value = objdb.ProjectPhases.Where(x => x.ProjectPhaseId == objedit.PhaseId && x.IsACTIVE == true).Select(o => o).FirstOrDefault();

                ////  giving already message  for the phase (between days) 
                //  var alreadyall = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true).Select(o => o).FirstOrDefault();

                //  var alreadyall = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName && x.IsACTIVE == true).Select(o => o).FirstOrDefault();

                //giving already message for between days where enddate == entered d date
                // var already = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate <= objedit.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true ).Select(o => o).FirstOrDefault();

                //giving already message for between days where startdate == entered start date
                //var startalready = objdb.ProjectPhases.Where(x => x.StartDate <= objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true).Select(o => o).FirstOrDefault();
                //  if ( alreadyall != null  || startalready != null)
                // {
                //     return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                // }

                //if (alreadyall != null)
                //{
                //    return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);

                //}
                //if (value.ProjectID != objedit.ProjectName)
                //{
                //    objlog.ChangedBy = userId;
                //    objlog.ColumnChanged = "Project";
                //    objlog.TableName = "ProjectPhase";
                //    objlog.CurrentValue = Convert.ToInt32(objedit.ProjectName).ToString();
                //    objlog.date = System.DateTime.Now;
                //    objlog.PreviousValue = Convert.ToInt32(value.ProjectID).ToString();
                //    objlog.TableId = 1273771595;
                //    objdb.AddToProjectPhaseLogs(objlog);
                //    objdb.SaveChanges();



                //}


                //saving edited PhaseStatus,StartDate,EndDate in log table
                if (value.PhaseStatus != objedit.PhaseStatus && value.StartDate != objedit.StartDate && value.EndDate != objedit.EndTime)
                {
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Phase Status/StartDate/EndDate";
                    objlog.TableName = "ProjectPhase";
                    objlog.CurrentValue = Convert.ToInt32(objedit.PhaseStatus).ToString() + "/" + objedit.StartDate.ToString() + "/" + objedit.EndTime.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.Phase.ToString() + "/" + value.StartDate + "/" + value.EndDate;
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }


                //saving Phase Status in log table
                if (value.PhaseStatus != objedit.PhaseStatus && value.StartDate == objedit.StartDate && value.EndDate == objedit.EndTime && value.NoOfEfforts == objedit.NumberOfEfforts && value.Phase == objedit.PhaseName)
                {
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "PhaseStatus";
                    objlog.CurrentValue = Convert.ToInt32(objedit.PhaseStatus).ToString();
                    objlog.TableName = "ProjectPhase";
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = Convert.ToInt32(value.PhaseStatus).ToString();
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving edited efforts in log table
                if (value.NoOfEfforts != objedit.NumberOfEfforts && value.StartDate == objedit.StartDate && value.EndDate == objedit.EndTime && value.PhaseStatus == objedit.PhaseStatus && value.Phase == objedit.PhaseName)
                {

                    //startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                    //enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                    //string start = startdate.ToString("dd/MM/yyyy");
                    //string end = enddate.ToString("dd/MM/yyyy");
                    int z = 0;
                    List<int> TotalHours = new List<int>();
                    TotalHours = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();


                    if (TotalHours.Count() != 1)
                    {
                        for (int x = 0; x < TotalHours.Count(); x++)
                        {
                            z += TotalHours[x];
                        }
                        if (objedit.NumberOfEfforts < z)
                        {

                            return Json("greater", JsonRequestBehavior.AllowGet);

                        }
                    }
                    else
                    {
                        if (TotalHours.Count() == 1)
                        {
                            var Value = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();
                            if (objedit.NumberOfEfforts < Value)
                            {
                                return Json("greater", JsonRequestBehavior.AllowGet);
                            }


                        }


                    }

                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Number Of Efforts";
                    objlog.CurrentValue = Convert.ToInt32(objedit.NumberOfEfforts).ToString();
                    objlog.TableName = "ProjectPhase";
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = Convert.ToInt32(value.NoOfEfforts).ToString();
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving  edited phase name in log table
                if (value.Phase != objedit.PhaseName && value.PhaseStatus == objedit.PhaseStatus && value.NoOfEfforts == objedit.NumberOfEfforts && value.StartDate == objedit.StartDate && value.EndDate == objedit.EndTime)
                {
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Phase";
                    objlog.TableName = "ProjectPhase";
                    objlog.CurrentValue = objedit.PhaseName.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.Phase.ToString();
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving edited startdate in log table
                if (value.StartDate != objedit.StartDate && value.EndDate == objedit.EndTime && value.NoOfEfforts == objedit.NumberOfEfforts && value.PhaseStatus == objedit.PhaseStatus && value.Phase == objedit.PhaseName)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();
                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }
                    }
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Start Date";
                    objlog.TableName = "ProjectPhase";
                    objlog.CurrentValue = objedit.StartDate.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.StartDate.ToString();
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }
                //saving edited enddate in log table
                if (value.EndDate != objedit.EndTime && value.StartDate == objedit.StartDate && value.NoOfEfforts == objedit.NumberOfEfforts && value.PhaseStatus == objedit.PhaseStatus && value.Phase == objedit.PhaseName)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();
                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }
                    }

                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "End Date";
                    objlog.TableName = "ProjectPhase";
                    objlog.CurrentValue = objedit.EndTime.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.EndDate.ToString();
                    objlog.TableId = 1273771595;
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving edited phasestatus,Phase,StartDate,EndDate,NoOfEfforts,PhaseStatus
                if (value.PhaseStatus != objedit.PhaseStatus && value.Phase != objedit.PhaseName && value.NoOfEfforts != objedit.NumberOfEfforts && value.StartDate != objedit.StartDate && value.EndDate != objedit.EndTime)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();

                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }


                    }
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "PhaseStatus/Phase/StartDate/EndDate/NoOfEfforts/PhaseStatus";
                    objlog.CurrentValue = Convert.ToInt32(objedit.ProjectName).ToString() + "/" + Convert.ToInt32(objedit.PhaseStatus).ToString() + "/" + objedit.PhaseName + "/" + Convert.ToInt32(objedit.NumberOfEfforts).ToString() + "/" + Convert.ToInt32(objedit.StartDate).ToString() + "/" + Convert.ToInt32(objedit.EndTime).ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = Convert.ToInt32(objedit.ProjectName).ToString() + "/" + Convert.ToInt32(objedit.PhaseStatus).ToString() + "/" + objedit.PhaseName + "/" + Convert.ToInt32(objedit.NumberOfEfforts).ToString() + "/" + Convert.ToInt32(objedit.StartDate).ToString() + "/" + Convert.ToInt32(objedit.EndTime).ToString();
                    objlog.TableId = 1233;
                    objlog.TableName = "ProjectPhase";
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving edited Phase,NoOfEfforts in log table
                if (value.Phase != objedit.PhaseName && value.NoOfEfforts != objedit.NumberOfEfforts && value.StartDate == objedit.StartDate && value.EndDate == objedit.EndTime)
                {
                    //var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();

                    //startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                    //enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                    //string start = startdate.ToString("dd/MM/yyyy");
                    //string end = enddate.ToString("dd/MM/yyyy");
                    int z = 0;
                    List<int> TotalHours = new List<int>();
                    TotalHours = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();


                    if (TotalHours.Count() != 1)
                    {
                        for (int x = 0; x < TotalHours.Count(); x++)
                        {
                            z += TotalHours[x];
                        }
                        if (objedit.NumberOfEfforts < z)
                        {

                            return Json("greater", JsonRequestBehavior.AllowGet);

                        }
                    }
                    else
                    {
                        if (TotalHours.Count() == 1)
                        {
                            var Value = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();
                            if (objedit.NumberOfEfforts < Value)
                            {
                                return Json("greater", JsonRequestBehavior.AllowGet);
                            }


                        }


                    }
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Phase Name/ Number Of Efforts";
                    objlog.CurrentValue = objedit.PhaseName + "/" + Convert.ToInt32(objedit.NumberOfEfforts).ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.Phase.ToString() + "/" + value.NoOfEfforts;
                    objlog.TableId = 1273771595;
                    objlog.TableName = "ProjectPhase";
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }

                //saving edited startdate in log table
                if (value.StartDate != objedit.StartDate && value.EndDate != objedit.EndTime && value.NoOfEfforts == objedit.NumberOfEfforts && value.PhaseStatus == objedit.PhaseStatus && value.Phase == objedit.PhaseName)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();
                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }
                    }
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Start Date/ End Date";
                    objlog.CurrentValue = objedit.StartDate.ToString() + "/" + objedit.EndTime.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.Phase.ToString() + "/" + value.EndDate;
                    objlog.TableId = 1273771595;
                    objlog.TableName = "ProjectPhase";
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }


                //saving edited phasestatus,startdate,phase,enddate in log table
                if (value.PhaseStatus != objedit.PhaseStatus && value.StartDate != objedit.StartDate && value.Phase == objedit.PhaseName && value.EndDate == objedit.EndTime)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();
                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                    }
                    objlog.ChangedBy = userId;
                    objlog.ColumnChanged = "Phase Status/ Start Date";
                    objlog.CurrentValue = Convert.ToInt32(objedit.PhaseStatus).ToString() + "/" + objedit.StartDate.ToString();
                    objlog.date = System.DateTime.Now;
                    objlog.PreviousValue = value.Phase.ToString() + "/" + value.StartDate;
                    objlog.TableId = 1273771595;
                    objlog.TableName = "ProjectPhase";
                    objdb.AddToProjectPhaseLogs(objlog);
                    objdb.SaveChanges();
                }





                //saving edited startdate,enddate,phasestatus in log table
                if (value.StartDate != objedit.StartDate && value.EndDate != objedit.EndTime && value.PhaseStatus != objedit.PhaseStatus)
                {
                    var objvalue = objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o).FirstOrDefault();
                    if (objvalue != null)
                    {
                        startdate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.StartDate).FirstOrDefault();
                        enddate = (DateTime)objdb.TS_Task.Where(x => x.PhaseNameId == objedit.PhaseId).Select(o => o.EndDATE).FirstOrDefault();

                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");

                        bool overlapping = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        bool overlap = objdb.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(objedit.StartDate)
                                   && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(objedit.EndTime) && x.PhaseNameId == objedit.PhaseId && x.ISACTIVE == true) != null;

                        if (overlapping || overlap)
                        {
                            var result = new { message = "timeexceed", sdate = start, edate = end };
                            return Json(new { message = "timeexceed", sdate = start, edate = end });
                        }
                    }

                    var almost = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate == objedit.EndTime && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var almostall = objdb.ProjectPhases.Where(x => x.StartDate <= objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready1 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate == objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready2 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate > objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready3 = objdb.ProjectPhases.Where(x => x.StartDate > objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    if (almost != null || almostall != null || ready != null || ready1 != null || ready2 != null || ready3 != null)
                    {
                        return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.Phase = objedit.PhaseName;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;

                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }
                        System.Web.HttpContext.Current.Application["Addphaseedit"] = "1";
                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }

                //saving edited enddate,phasestatus in log table
                if (value.StartDate == objedit.StartDate && value.EndDate != objedit.EndTime && value.PhaseStatus != objedit.PhaseStatus)
                {
                    //check already exist record
                    var almost = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate == objedit.EndTime && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var almostall = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == status && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready1 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate == objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready2 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate > objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready3 = objdb.ProjectPhases.Where(x => x.StartDate > objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    if (almost != null || almostall != null || ready != null || ready1 != null || ready2 != null || ready3 != null)
                    {
                        return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.Phase = objedit.PhaseName;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }

                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }


                if (value.EndDate == objedit.EndTime && value.StartDate != objedit.StartDate && value.PhaseStatus != objedit.PhaseStatus)
                {
                    var almost = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate == objedit.EndTime && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var almostall = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready1 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate == objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready2 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate > objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready3 = objdb.ProjectPhases.Where(x => x.StartDate > objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    if (almost != null || almostall != null || ready != null || ready1 != null || ready2 != null || ready3 != null)
                    {
                        return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.Phase = objedit.PhaseName;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }

                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }

                if (value.EndDate == objedit.EndTime && value.StartDate == objedit.StartDate && value.PhaseStatus != objedit.PhaseStatus)
                {
                    var almost = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate == objedit.EndTime && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var almostall = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready = objdb.ProjectPhases.Where(x => x.StartDate == objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready1 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate == objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready2 = objdb.ProjectPhases.Where(x => x.StartDate < objedit.StartDate && x.EndDate > objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var ready3 = objdb.ProjectPhases.Where(x => x.StartDate > objedit.StartDate && x.EndDate < objedit.EndTime && x.ProjectID == i && x.PhaseStatus == objedit.PhaseStatus && x.IsACTIVE == true && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();

                    if (almost != null || almostall != null || ready != null || ready1 != null || ready2 != null || ready3 != null)
                    {
                        return Json(new { Result = "Already", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.Phase = objedit.PhaseName;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }
                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }

                if (value.EndDate == objedit.EndTime && value.StartDate == objedit.StartDate && value.Phase != objedit.PhaseName)
                {
                    var sameall = objdb.ProjectPhases.Where(x => x.PhaseStatus == status && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var same = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName && x.ProjectID == i).Select(o => o).FirstOrDefault();
                    //  var samephase = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    if (sameall != null || same != null)
                    {
                        return Json(new { Result = "AlreadySame", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.Phase = objedit.PhaseName;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }
                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }

                if ((value.EndDate == objedit.EndTime && value.StartDate == objedit.StartDate && value.Phase != objedit.PhaseName) || (value.EndDate != objedit.EndTime && value.StartDate != objedit.StartDate && value.Phase != objedit.PhaseName) || (value.EndDate != objedit.EndTime && value.StartDate == objedit.StartDate && value.Phase != objedit.PhaseName) || (value.EndDate == objedit.EndTime && value.StartDate != objedit.StartDate && value.Phase != objedit.PhaseName))
                {
                    var sameall = objdb.ProjectPhases.Where(x => x.PhaseStatus == status && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    // var samephase = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var same = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName && x.ProjectID == i).Select(o => o).FirstOrDefault();
                    if (sameall != null && same != null)
                    {
                        return Json(new { Result = "AlreadySame", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.Phase = objedit.PhaseName;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }
                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }

                if (value.EndDate != objedit.EndTime && value.StartDate != objedit.StartDate && value.Phase != objedit.PhaseName)
                {
                    var sameall = objdb.ProjectPhases.Where(x => x.PhaseStatus == status && x.ProjectID == i && x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();
                    var same = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName && x.ProjectID == i).Select(o => o).FirstOrDefault();
                    // var samephase = objdb.ProjectPhases.Where(x => x.Phase == objedit.PhaseName).Select(o => o).FirstOrDefault();

                    if (sameall != null && same != null)
                    {
                        return Json(new { Result = "AlreadySame", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {

                        value.ProjectID = objedit.ProjectName;
                        value.StartDate = objedit.StartDate;
                        value.EndDate = objedit.EndTime;
                        value.IsACTIVE = true;
                        value.NoOfEfforts = objedit.NumberOfEfforts;
                        value.PhaseStatus = objedit.PhaseStatus;
                        value.Phase = objedit.PhaseName;
                        value.CreatedDate = System.DateTime.Now;
                        value.UserID = userId;
                        if (objedit.IsOpen == 1)
                        {
                            value.IsOpen = true;
                            TempData["open"] = 1;
                        }
                        else
                        {
                            value.IsOpen = false;
                            TempData["open"] = 0;
                        }
                        objdb.SaveChanges();
                        return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
                    }
                }


                value.ProjectID = objedit.ProjectName;
                value.StartDate = objedit.StartDate;
                value.EndDate = objedit.EndTime;
                value.Phase = objedit.PhaseName;
                value.IsACTIVE = true;
                value.NoOfEfforts = objedit.NumberOfEfforts;
                value.PhaseStatus = objedit.PhaseStatus;
                value.CreatedDate = System.DateTime.Now;
                value.UserID = userId;
                if (objedit.IsOpen == 1)
                {
                    TempData["open"] = 1;
                    value.IsOpen = true;
                }
                else if (objedit.IsOpen == 2)
                {
                    TempData["open"] = 0;
                    value.IsOpen = false;
                }
                // value.IsOpen = true;
                objdb.SaveChanges();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult DeletePhase(int PhaseId)
        {
            // int ID = Convert.ToInt32(Id);
            int UserId = int.Parse(Session["UserID"].ToString());
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.ProjectPhaseLog log = new DSRCManagementSystem.ProjectPhaseLog();
            try
            {
                var value = db.ProjectPhases.Where(x => x.ProjectPhaseId == PhaseId).Select(o => o).FirstOrDefault();
                value.IsACTIVE = false;
                value.IsOpen = false;
                log.ChangedBy = UserId;
                log.ColumnChanged = "IsActive/IsOpen";
                log.PreviousValue = "1/1";
                log.CurrentValue = "0/0";
                log.date = System.DateTime.Now;
                log.TableId = 1485248346;
                db.SaveChanges();
                System.Web.HttpContext.Current.Application["Deletephase"] = "1";
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", URL = @Url.Action("AlertPopUp", "Popup") }, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public ActionResult TimeSheetDesign()
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.Models.Taskmodel objtask = new DSRCManagementSystem.Models.Taskmodel();
            try
            {
                var userId = (int)Session["UserId"];
                int roleid = db.UserRoles.FirstOrDefault(x => x.UserID == userId).RoleID;

                objtask.addtask = (from p in db.TS_Task.Where(x => x.ISACTIVE == true && x.UserId == userId)
                                   join t in db.PhaseTaskTypeMappings on p.TaskStatus equals t.TaskTypeID
                                   join u in db.Projects on p.ProjectName equals u.ProjectID
                                   join c in db.ProjectPhases on p.PhaseNameId equals c.ProjectPhaseId
                                   join e in db.Master_PhaseStatus on p.PhaseStatus equals e.PhaseStatusId
                                   select new DSRCManagementSystem.Models.AddTaskModel
                                   {
                                       ID = p.TaskId,
                                       ProjectName = u.ProjectName,
                                       PhaseName = c.Phase,
                                       PhaseStatus = e.PhaseStatusName,
                                       Taskstatus = t.TaskTypeName,
                                       TaskName = p.TaskName,
                                       StartDate = p.StartDate,
                                       EndDate = p.EndDATE,

                                       Efforts = p.NoOfEfforts
                                   }).OrderBy(x => x.TaskName).OrderByDescending(x => x.StartDate).ThenByDescending(x => x.StartDate.Value.Month).ThenByDescending(x => x.StartDate.Value.Year).ToList();

                int task = Convert.ToInt32(TempData["newtask"]);
                int taskedit = Convert.ToInt32(TempData["new addtaskedit"]);
                int taskdelete = Convert.ToInt32(TempData["deletetask"]);

                if (task == 1 || taskedit == 1 || taskdelete == 1)
                {

                    objtask.newtask = 1;

                }
                foreach (var item in objtask.addtask)
                {
                    var Assignedlist = db.TS_AssignedTask.Where(x => x.TaskName == item.ID && x.IsActive == true).Select(o => o).FirstOrDefault();
                    if (Assignedlist != null)
                    {
                        item.alreadyassigned = 1;
                    }
                    else
                    {

                        item.alreadyassigned = 0;
                    }

                }




                //objtask.assigntask = (from t in
                //                 (
                //                     from rc in db.TS_AssignedTask
                //                     join p in db.Projects on rc.ProjectId equals p.ProjectID
                //                     join ps in db.ProjectPhases on rc.PhaseName equals ps.ProjectPhaseId
                //                     join t in db.TS_Task on rc.TaskName equals t.TaskId
                //                     join u in db.Users on rc.Employees equals u.UserID
                //                     join pt in db.PhaseTaskTypeMappings on rc.TaskStatus equals pt.TaskTypeID
                //                     where rc.IsActive == true
                //                     select new { rc, p,ps,t,u,pt }
                //                     )
                //             group t by t.rc.TaskName into newT
                //             select new Assigntaskmodel()
                //             {
                //                 ProjectId = newT.FirstOrDefault().rc.ProjectId,
                //                 ProjectName = newT.FirstOrDefault().p.ProjectName,
                //                 PhaseName = newT.FirstOrDefault().ps.Phase,
                //                 StartDate = newT.FirstOrDefault().rc.StartDate,
                //                 EndDate = newT.FirstOrDefault().rc.EndDate,
                //                 NumberOfEfforts = newT.FirstOrDefault().rc.NoOfEfforts,
                //                 TaskName = newT.FirstOrDefault().t.TaskName,
                //                 taskstatus = newT.FirstOrDefault().pt.TaskTypeName,
                //                 Taskid = newT.FirstOrDefault().t.TaskId
                //             }).ToList();
                if (roleid != 4)
                {
                    objtask.assigntask = (from rc in db.TS_AssignedTask
                                          join p in db.Projects on rc.ProjectId equals p.ProjectID
                                          join ps in db.ProjectPhases on rc.PhaseName equals ps.ProjectPhaseId
                                          join t in db.TS_Task on rc.TaskName equals t.TaskId
                                          // join u in db.Users on rc.Employees equals u.UserID
                                          join pt in db.PhaseTaskTypeMappings on rc.TaskStatus equals pt.TaskTypeID

                                          where rc.IsActive == true && rc.flag == 0
                                          select new Assigntaskmodel()
                                          {
                                              assigntaskid = rc.AssignedTaskId,
                                              ProjectId = rc.ProjectId,
                                              ProjectName = p.ProjectName,
                                              PhaseName = ps.Phase,
                                              StartDate = rc.StartDate,
                                              EndDate = rc.EndDate,
                                              NumberOfEfforts = rc.NoOfEfforts,
                                              TaskName = t.TaskName,
                                              // Employees = u.FirstName + " " + " " + (u.LastName ?? ""),
                                              multiselectemployess = rc.SelectedEmployess,
                                              taskstatus = pt.TaskTypeName,
                                              Taskid = t.TaskId
                                          }).Distinct().OrderByDescending(x => x.StartDate).ThenByDescending(x => x.StartDate.Value.Month).ThenByDescending(x => x.EndDate.Value.Year).ToList();

                    foreach (var meetingSchedule in objtask.assigntask)
                    {
                        meetingSchedule.multiselectemployess = TSRController.GetUserString(db, meetingSchedule.multiselectemployess);

                    }


                    int assigntask = Convert.ToInt32(TempData["newassigntask"]);
                    int assignedit = Convert.ToInt32(TempData["new assigntaskedit"]);
                    int deleteassign = Convert.ToInt32(TempData["AsssignTaskDelete"]);
                    // int deleteassign = Convert.ToInt32(System.Web.HttpContext.Current.Application["Deleteassigntask"]);
                    if (assigntask == 1 || assignedit == 1 || deleteassign == 1)
                    {
                        objtask.newassigntask = 1;

                    }





                    return View(objtask);
                }
                else
                {

                    objtask.assigntask = (from rc in db.TS_AssignedTask
                                          join p in db.Projects on rc.ProjectId equals p.ProjectID
                                          join ps in db.ProjectPhases on rc.PhaseName equals ps.ProjectPhaseId
                                          join t in db.TS_Task on rc.TaskName equals t.TaskId
                                          // join u in db.Users on rc.Employees equals u.UserID
                                          join pt in db.PhaseTaskTypeMappings on rc.TaskStatus equals pt.TaskTypeID
                                          where rc.IsActive == true && rc.flag == 0
                                          select new Assigntaskmodel()
                                          {
                                              assigntaskid = rc.AssignedTaskId,
                                              ProjectId = rc.ProjectId,
                                              ProjectName = p.ProjectName,
                                              PhaseName = ps.Phase,
                                              StartDate = rc.StartDate,
                                              EndDate = rc.EndDate,
                                              NumberOfEfforts = rc.NoOfEfforts,
                                              TaskName = t.TaskName,
                                              // Employees = u.FirstName + " " + " " + (u.LastName ?? ""),
                                              multiselectemployess = rc.SelectedEmployess,
                                              taskstatus = pt.TaskTypeName,
                                              Taskid = t.TaskId
                                          }).Distinct().OrderByDescending(x => x.StartDate).ThenByDescending(x => x.StartDate.Value.Month).ThenByDescending(x => x.StartDate.Value.Year).ToList();

                    foreach (var meetingSchedule in objtask.assigntask)
                    {
                        meetingSchedule.multiselectemployess = TSRController.GetUserString(db, meetingSchedule.multiselectemployess);


                    }


                    int assigntask = Convert.ToInt32(TempData["newassigntask"]);
                    int assignedit = Convert.ToInt32(TempData["new assigntaskedit"]);
                    //int deleteassign = Convert.ToInt32(TempData["deleteassigntask"]);
                    int deleteassign = Convert.ToInt32(TempData["AsssignTaskDelete"]);
                    // int deleteassign = Convert.ToInt32(System.Web.HttpContext.Current.Application["Deleteassigntask"]);
                    if (assigntask == 1 || assignedit == 1 || deleteassign == 1)
                    {
                        objtask.newassigntask = 1;

                    }

                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(objtask);
        }

        [HttpGet]
        public ActionResult AssignTskEdit(int assigntaskid)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            AssignTaskModel task = new AssignTaskModel();
            try
            {
                var userId = (int)Session["UserId"];

                var obj = (from p in objdb.UserProjects.Where(x => x.UserID == userId)
                           join t in objdb.Projects on p.ProjectID equals t.ProjectID
                           select new
                           {
                               ProjectId = p.ProjectID,
                               ProjectName = t.ProjectName
                           }).OrderBy(o => o.ProjectName).ToList();

                var querying = (from rc in objdb.TS_AssignedTask
                                join p in objdb.Projects on rc.ProjectId equals p.ProjectID
                                join ps in objdb.ProjectPhases on rc.PhaseName equals ps.ProjectPhaseId
                                join t in objdb.TS_Task on rc.TaskName equals t.TaskId
                                join u in objdb.Users on rc.Employees equals u.UserID
                                join pt in objdb.PhaseTaskTypeMappings on rc.TaskStatus equals pt.TaskTypeID
                                where rc.IsActive == true && rc.AssignedTaskId == assigntaskid
                                select new AssignTaskModel
                                {
                                    Empid = u.EmpID,
                                    userid = u.UserID
                                });
                var query = (from rc in objdb.TS_AssignedTask
                             join p in objdb.Projects on rc.ProjectId equals p.ProjectID
                             join ps in objdb.ProjectPhases on rc.PhaseName equals ps.ProjectPhaseId
                             join t in objdb.TS_Task on rc.TaskName equals t.TaskId
                             //   join u in objdb.Users on rc.Employees equals u.UserID
                             join pt in objdb.PhaseTaskTypeMappings on rc.TaskStatus equals pt.TaskTypeID
                             where rc.IsActive == true && rc.AssignedTaskId == assigntaskid
                             select new AssignTaskModel
                             {
                                 // Empid = u.EmpID,
                                 // userid = u.UserID,
                                 assigntaskid = rc.AssignedTaskId,
                                 ProjectphaseId = ps.ProjectPhaseId,
                                 PhaseId = ps.ProjectPhaseId,
                                 ProjectId = p.ProjectID,
                                 Taskid = t.TaskId,
                                 tasktypeid = pt.TaskTypeID,
                                 ProjectName = p.ProjectName,
                                 PhaseName = ps.Phase,
                                 StartDate = rc.StartDate,
                                 EndDate = rc.EndDate,
                                 NumberOfEfforts = rc.NoOfEfforts,
                                 TaskName = t.TaskName,
                                 taskstatus = pt.TaskTypeName,
                                 //Employees = u.FirstName + "" + u.LastName ?? ""
                                 multiselectemployees = rc.SelectedEmployess
                             }).FirstOrDefault();

                int pid = query.ProjectId;

                DateTime d1 = Convert.ToDateTime(query.StartDate);
                string d = d1.ToShortDateString();
                query.Start = d;

                DateTime d2 = Convert.ToDateTime(query.EndDate);
                string d3 = d2.ToShortDateString();
                query.End = d3;


                var phase = (from p in objdb.ProjectPhases.Where(x => x.ProjectID == pid && x.IsACTIVE == true)
                             select new AssignTaskModel()
                             {
                                 PhaseId = p.ProjectPhaseId,
                                 PhaseName = p.Phase
                             }).ToList();
                var Task = (from t in objdb.TS_Task.Where(x => x.ProjectName == pid && x.ISACTIVE == true)
                            select new AssignTaskModel()
                            {
                                Taskid = t.TaskId,
                                TaskName = t.TaskName

                            }).ToList();

                var employees = (from p in objdb.UserProjects.Where(x => x.ProjectID == pid)
                                 join t in objdb.Users on p.UserID equals t.UserID
                                 select new AssignTaskModel()
                                 {
                                     userid = t.UserID,
                                     Employees = t.FirstName + " " + t.LastName
                                 }).ToList();

                var EmployeeList = (from p in objdb.UserProjects.Where(x => x.ProjectID == pid)
                                    join t in objdb.Users on p.UserID equals t.UserID
                                    select new
                                    {
                                        ID1 = p.UserID,
                                        UserName1 = t.FirstName + "" + t.LastName

                                    }).ToList();


                var taskstatus = (from t in objdb.TS_Task.Where(x => x.ProjectName == pid)
                                  join p in objdb.PhaseTaskTypeMappings on t.PhaseStatus equals p.PhaseStatusId

                                  select new AssignTaskModel()
                                  {
                                      tasktypeid = p.TaskTypeID,
                                      taskstatus = p.TaskTypeName
                                  }).ToList();


                //var AttendeeList = (from a in db.MettingSchedules
                //                    where a.Id == ID
                //                    select new MeetingSchedule()
                //                    {
                //                        Attendees = a.Attendees
                //                    }).FirstOrDefault();


                var List = (from p in objdb.TS_AssignedTask
                            where p.AssignedTaskId == assigntaskid
                            select new Assigntaskmodel()
                            {

                                multiselectemployess = p.SelectedEmployess
                            }).FirstOrDefault();




                List<int> selectedAttendees = new List<int>();

                if (List.multiselectemployess != null)
                {

                    string[] tokens = List.multiselectemployess.Split(new string[] { "," }, StringSplitOptions.None);
                    foreach (var i in tokens)
                    {
                        int val;
                        int.TryParse(i, out val);
                        selectedAttendees.Add(val);
                    }
                }


                //var query1 = (from rc in objdb.TS_AssignedTask
                //              join u in objdb.Users on rc.Employees equals u.UserID
                //              where rc.IsActive == true && rc.AssignedTaskId == assigntaskid
                //              select new AssignTaskModel
                //              {
                //                  userid = u.UserID
                //                  // Employees = u.FirstName + " " + (u.LastName ?? "")
                //              }).ToList();




                //List<int> selectedemployees = new List<int>();
                //foreach (var id in querying)
                //{
                //    int userid=Convert.ToInt32(id.userid);
                //    selectedemployees.Add(userid

                //}

                //for (int i = 0; i <= query.Pha; i++)
                //{ }
                //{

                //    selectedemployees.Add(Convert.ToInt32(id));

                //}

                ViewBag.taskstatuslist = new SelectList(taskstatus, "tasktypeid", "taskstatus");


                ViewBag.PhaseList = new SelectList(phase, "PhaseId", "PhaseName", query.ProjectphaseId);
                ViewBag.ProjectList = new SelectList(obj, "ProjectId", "ProjectName", query.ProjectId);
                ViewBag.Employees = new MultiSelectList(employees, "userid", "Employees", query.multiselectemployees.ToString());

                ViewBag.Email1 = new MultiSelectList(EmployeeList, "Id1", "UserName1", selectedAttendees);
                // ViewBag.Leaders = new MultiSelectList(ProjectLead, "Id", "FirstName", selectedAttendees);
                ViewBag.tasklist = new SelectList(Task, "Taskid", "TaskName", query.Taskid);
                return View(query);
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }

            return View();
        }
        [HttpPost]
        public ActionResult AssignTskEdit(AssignTaskModel model)
        {
            try
            {
                var employeecount = model.SelectedEmpList.Count();

                using (DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1())
                {
                    string UserName = " ";
                    DateTime startdate;
                    DateTime enddate;
                    foreach (int id in model.SelectedEmpList)
                    {

                        UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
                        startdate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).StartDate;
                        enddate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).EndDATE;
                        string start = startdate.ToString("dd/MM/yyyy");
                        string end = enddate.ToString("dd/MM/yyyy");
                        string fdate = Convert.ToString(model.StartDate);
                        string tdate = Convert.ToString(model.EndDate);


                        var fromdate = DateTime.Parse(fdate);
                        var todate = DateTime.Parse(tdate);
                        bool overlapping = db.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(fromdate)
                        && EntityFunctions.TruncateTime(x.EndDATE) >= EntityFunctions.TruncateTime(todate) && x.TaskId == model.Taskid && x.ISACTIVE == true) != null;




                        bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                          EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(fromdate)
                          && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(todate) && x.Employees == id && x.IsActive == true && x.ProjectId == model.ProjectId && x.Task == model.Task) != null;

                        //if (overlapping)
                        //{
                        //    var result = new { message = "timeexceed", sdate = start, edate = end };
                        //    return Json(new { message = "timeexceed", sdate = start, edate = end });
                        //}
                        //if (overlap)
                        //{
                        //    var result = new { message = "Already", name = UserName };
                        //    return Json(new { message = "Already", name = UserName });
                        //}


                    }
                    var userId = (int)Session["UserId"];
                    var obj_Comp = db.TS_AssignedTask.Where(o => o.AssignedTaskId == model.assigntaskid && o.IsActive == true).Select(o => o).FirstOrDefault();

                    ProjectPhaseLog obj = new ProjectPhaseLog();
                    var record = db.TS_AssignedTask.FirstOrDefault(x => (x.AssignedTaskId == model.assigntaskid));


                    if (obj_Comp.Employees != model.userid && obj_Comp.StartDate != model.StartDate && obj_Comp.EndDate != model.EndDate && obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/Start Date/End Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.StartDate.ToString() + "/" + model.EndDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.StartDate.ToString() + "/" + obj_Comp.EndDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();

                    }

                    else if (obj_Comp.Employees != model.userid && obj_Comp.StartDate != model.StartDate && obj_Comp.EndDate != model.EndDate)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/Start Date/End Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.StartDate.ToString() + "/" + model.EndDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.StartDate.ToString() + "/" + obj_Comp.EndDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();

                    }

                    else if (obj_Comp.Employees != model.userid && obj_Comp.StartDate != model.StartDate)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/Start Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.StartDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.StartDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();

                    }

                    else if (obj_Comp.Employees != model.userid && obj_Comp.EndDate != model.EndDate)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/End Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.EndDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.EndDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.Employees != model.userid && obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees//No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.StartDate != model.StartDate && obj_Comp.EndDate != model.EndDate)
                    {


                        foreach (int id in model.SelectedEmpList)
                        {
                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                            UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
                            startdate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).StartDate;
                            enddate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).EndDATE;
                            string start = startdate.ToString("dd/MM/yyyy");
                            string end = enddate.ToString("dd/MM/yyyy");
                            string fdate = Convert.ToString(model.StartDate);
                            string tdate = Convert.ToString(model.EndDate);


                            var fromdate = DateTime.Parse(fdate);
                            var todate = DateTime.Parse(tdate);
                            bool overlapping = db.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(fromdate)
                            && EntityFunctions.TruncateTime(x.EndDATE) >= EntityFunctions.TruncateTime(todate) && x.TaskId == model.Taskid && x.ISACTIVE == true) != null;


                            //bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                            //         EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(todate)
                            //         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(fromdate) && x.Employees == id && x.IsActive == true && x.AssignedTaskId != model.assigntaskid && x.TaskName == model.Taskid) != null;

                            ////var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                            ////int y = 0;


                            ////List<int> Total = new List<int>();

                            ////Total = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();

                            ////for (int z = 0; z < Total.Count(); z++)
                            ////{

                            ////    y += Total[z];

                            ////}




                            bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                              EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(fromdate)
                              && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(x.StartDate) && x.Employees == id && x.IsActive == true && x.ProjectId == model.ProjectId && x.Task == model.Task) != null;

                            if (!overlapping)
                            {
                                var result = new { message = "timeexceed", sdate = start, edate = end };
                                return Json(new { message = "timeexceed", sdate = start, edate = end });
                            }
                            if (overlap)
                            {
                                var result = new { message = "Already", name = UserName };
                                return Json(new { message = "Already", name = UserName });
                            }


                        }

                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Start Date/End Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.StartDate.ToString() + "/" + model.EndDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.StartDate.ToString() + "/" + obj_Comp.EndDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.StartDate != model.StartDate && obj_Comp.EndDate != model.EndDate && obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        foreach (int id in model.SelectedEmpList)
                        {
                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                            UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
                            startdate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).StartDate;
                            enddate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).EndDATE;
                            string start = startdate.ToString("dd/MM/yyyy");
                            string end = enddate.ToString("dd/MM/yyyy");
                            string fdate = Convert.ToString(model.StartDate);
                            string tdate = Convert.ToString(model.EndDate);


                            var fromdate = DateTime.Parse(fdate);
                            var todate = DateTime.Parse(tdate);
                            bool overlapping = db.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(fromdate)
                            && EntityFunctions.TruncateTime(x.EndDATE) > EntityFunctions.TruncateTime(todate) && x.TaskId == model.Taskid && x.ISACTIVE == true) != null;

                            //bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                            //         EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(todate)
                            //         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(fromdate) && x.Employees == id && x.IsActive == true && x.AssignedTaskId != model.assigntaskid && x.TaskName == model.Taskid) != null;

                            ////var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                            ////int y = 0;


                            ////List<int> Total = new List<int>();

                            ////Total = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();

                            ////for (int z = 0; z < Total.Count(); z++)
                            ////{

                            ////    y += Total[z];

                            ////}




                            bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                              EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(fromdate)
                              && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(x.StartDate) && x.Employees == id && x.IsActive == true && x.ProjectId == model.ProjectId && x.Task == model.Task) != null;

                            if (!overlapping)
                            {
                                var result = new { message = "timeexceed", sdate = start, edate = end };
                                return Json(new { message = "timeexceed", sdate = start, edate = end });
                            }
                            if (overlap)
                            {
                                var result = new { message = "Already", name = UserName };
                                return Json(new { message = "Already", name = UserName });
                            }


                        }
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Start Date/End Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.StartDate.ToString() + "/" + model.EndDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.StartDate.ToString() + "/" + obj_Comp.EndDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.StartDate != model.StartDate && obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Start Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.StartDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.StartDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.EndDate != model.EndDate && obj_Comp.NoOfEfforts != model.NumberOfEfforts && obj_Comp.Employees != model.userid)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/End Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.EndDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.EndDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.EndDate != model.EndDate && obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "End Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.EndDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.EndDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }

                    else if (obj_Comp.EndDate != model.EndDate && obj_Comp.Employees != model.userid)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/End Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.EndDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.EndDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }
                    else if (obj_Comp.NoOfEfforts != model.NumberOfEfforts && obj_Comp.Employees != model.userid && obj_Comp.StartDate != model.StartDate)
                    {
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees/Start Date/No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid + "/" + model.StartDate.ToString() + "/" + model.NumberOfEfforts;
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees + "/" + obj_Comp.StartDate.ToString() + "/" + obj_Comp.NoOfEfforts;
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }
                    else if (obj_Comp.Employees != model.userid)
                    {
                        var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                        int? y = 0;


                        List<int?> Total = new List<int?>();

                        Total = db.TS_AssignedTask.Where(x => x.TaskName == model.Taskid && x.IsActive == true).Select(o => o.NoOfEfforts).ToList();

                        if (Total.Count() != 1)
                        {
                            for (int z = 0; z < Total.Count(); z++)
                            {

                                y += Total[z];

                            }

                            if ((employeecount * model.NumberOfEfforts) > value)
                            {
                                return Json("Greater", JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {

                            if (value < model.NumberOfEfforts)
                            {

                                return Json("Greater", JsonRequestBehavior.AllowGet);
                            }

                        }


                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Employees";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.userid.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.Employees.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }
                    else if (obj_Comp.StartDate != model.StartDate)
                    {
                        foreach (int id in model.SelectedEmpList)
                        {
                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                            UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
                            startdate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).StartDate;
                            enddate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).EndDATE;
                            string start = startdate.ToString("dd/MM/yyyy");
                            string end = enddate.ToString("dd/MM/yyyy");
                            string fdate = Convert.ToString(model.StartDate);
                            string tdate = Convert.ToString(model.EndDate);


                            var fromdate = DateTime.Parse(fdate);
                            var todate = DateTime.Parse(tdate);
                            bool overlapping = db.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(fromdate)
                            && EntityFunctions.TruncateTime(x.EndDATE) >= EntityFunctions.TruncateTime(todate) && x.TaskId == model.Taskid && x.ISACTIVE == true) != null;

                            //bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                            //         EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(todate)
                            //         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(fromdate) && x.Employees == id && x.IsActive == true && x.AssignedTaskId != model.assigntaskid && x.TaskName == model.Taskid) != null;

                            ////var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                            ////int y = 0;


                            ////List<int> Total = new List<int>();

                            ////Total = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();

                            ////for (int z = 0; z < Total.Count(); z++)
                            ////{

                            ////    y += Total[z];

                            ////}




                            bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                              EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(fromdate)
                              && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(x.StartDate) && x.Employees == id && x.IsActive == true && x.ProjectId == model.ProjectId && x.Task == model.Task) != null;

                            if (!overlapping)
                            {
                                var result = new { message = "timeexceed", sdate = start, edate = end };
                                return Json(new { message = "timeexceed", sdate = start, edate = end });
                            }
                            if (overlap)
                            {
                                var result = new { message = "Already", name = UserName };
                                return Json(new { message = "Already", name = UserName });
                            }


                        }

                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "Start Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.StartDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.StartDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();

                    }
                    else if (obj_Comp.EndDate != model.EndDate)
                    {
                        foreach (int id in model.SelectedEmpList)
                        {
                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                            UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
                            startdate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).StartDate;
                            enddate = (DateTime)db.TS_Task.FirstOrDefault(x => x.TaskId == model.Taskid).EndDATE;
                            string start = startdate.ToString("dd/MM/yyyy");
                            string end = enddate.ToString("dd/MM/yyyy");
                            string fdate = Convert.ToString(model.StartDate);
                            string tdate = Convert.ToString(model.EndDate);


                            var fromdate = DateTime.Parse(fdate);
                            var todate = DateTime.Parse(tdate);
                            bool overlapping = db.TS_Task.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(fromdate)
                            && EntityFunctions.TruncateTime(x.EndDATE) >= EntityFunctions.TruncateTime(todate) && x.TaskId == model.Taskid && x.ISACTIVE == true) != null;

                            //bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                            //         EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(todate)
                            //         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(fromdate) && x.Employees == id && x.IsActive == true && x.AssignedTaskId != model.assigntaskid && x.TaskName == model.Taskid) != null;

                            ////var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                            ////int y = 0;


                            ////List<int> Total = new List<int>();

                            ////Total = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();

                            ////for (int z = 0; z < Total.Count(); z++)
                            ////{

                            ////    y += Total[z];

                            ////}




                            bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
                              EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(fromdate)
                              && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(x.StartDate) && x.Employees == id && x.IsActive == true && x.ProjectId == model.ProjectId && x.Task == model.Task) != null;

                            if (!overlapping)
                            {
                                var result = new { message = "timeexceed", sdate = start, edate = end };
                                return Json(new { message = "timeexceed", sdate = start, edate = end });
                            }
                            if (overlap)
                            {
                                var result = new { message = "Already", name = UserName };
                                return Json(new { message = "Already", name = UserName });
                            }


                        }

                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "End Date";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.EndDate.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.EndDate.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();
                    }
                    else if (obj_Comp.NoOfEfforts != model.NumberOfEfforts)
                    {
                        var value = db.TS_Task.Where(x => x.TaskId == model.Taskid && x.ISACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();

                        int? y = 0;


                        List<int?> Total = new List<int?>();

                        Total = db.TS_AssignedTask.Where(x => x.TaskName == model.Taskid && x.IsActive == true).Select(o => o.NoOfEfforts).ToList();

                        if (Total.Count() != 1)
                        {
                            for (int z = 0; z < Total.Count(); z++)
                            {

                                y += Total[z];

                            }

                            if ((employeecount * model.NumberOfEfforts) > value)
                            {
                                return Json("Greater", JsonRequestBehavior.AllowGet);
                            }
                        }
                        else
                        {

                            if (value < model.NumberOfEfforts)
                            {

                                return Json("Greater", JsonRequestBehavior.AllowGet);
                            }

                        }
                        obj.ChangedBy = userId;
                        obj.ColumnChanged = "No Of Efforts";
                        obj.TableName = "TS_AssignedTask";
                        obj.CurrentValue = model.NumberOfEfforts.ToString();
                        obj.date = System.DateTime.Now;
                        obj.PreviousValue = obj_Comp.NoOfEfforts.ToString();
                        obj.TableId = 406292507;
                        db.AddToProjectPhaseLogs(obj);
                        db.SaveChanges();

                    }

                    //if (record != null)
                    //{
                    //    record.Employees = model.userid;
                    //    record.NoOfEfforts = model.NumberOfEfforts;
                    //    record.StartDate = model.StartDate;
                    //    record.EndDate = model.EndDate;
                    //    db.SaveChanges();
                    //}
                    //else 
                    //{

                    //   obj_Comp.ProjectId = model.ProjectId;
                    //   obj_Comp.PhaseName = model.ProjectphaseId;
                    //   obj_Comp.TaskName = model.Taskid;
                    //   obj_Comp.StartDate = model.StartDate;
                    //   obj_Comp.EndDate = model.EndDate;
                    //   obj_Comp.NoOfEfforts = model.NumberOfEfforts;
                    ////   obj_Comp.Employees = model.userid;
                    //   obj_Comp.SelectedEmployess = model.multiselectemployees;

                    //   obj_Comp.TaskStatus = model.tasktypeid;
                    //   obj_Comp.Isreject = false;
                    //   obj_Comp.Approved = false;

                    List<DSRCManagementSystem.Models.MultiselectEmployees> objmulti = new List<DSRCManagementSystem.Models.MultiselectEmployees>();

                    objmulti = (from p in db.TS_AssignedTask.Where(x => x.IsActive == true && x.AssignedTaskId == model.assigntaskid)

                                select new DSRCManagementSystem.Models.MultiselectEmployees
                                {

                                    Multiselect = p.SelectedEmployess
                                    //  AssigntaskPrimary = p.AssignedTaskId

                                }).ToList();


                    List<int> objuser = new List<int>();
                    foreach (var item in objmulti)
                    {
                        string[] values = item.Multiselect.Split(',');
                        for (int y = 0; y < values.Count(); y++)
                        {
                            objuser.Add(Convert.ToInt32(values[y]));

                        }

                    }


                    obj_Comp.ProjectId = model.ProjectId;
                    obj_Comp.PhaseName = model.ProjectphaseId;
                    obj_Comp.TaskName = model.Taskid;
                    obj_Comp.StartDate = model.StartDate;
                    obj_Comp.EndDate = model.EndDate;
                    obj_Comp.NoOfEfforts = model.NumberOfEfforts;
                    obj_Comp.Employees = model.userid;
                    // obj_Comp.Employees = Convert.ToInt32(model.SelectedEmpList[i]);
                    obj_Comp.SelectedEmployess = model.multiselectemployees;
                    obj_Comp.TaskStatus = model.tasktypeid;
                    obj_Comp.Isreject = false;
                    obj_Comp.Approved = false;
                    db.SaveChanges();



                    DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();

                    var oj = odb.TS_AssignedTask.Where(x => x.SelectedEmployess == model.multiselectemployees).Select(o => o).ToList();






                    for (int i = 0; i < model.SelectedEmpList.Count(); i++)
                    {

                        var Value = Convert.ToInt32(model.SelectedEmpList[i]);
                        var alreadyvalue = db.TS_AssignedTask.Where(x => x.Employees == Value && x.flag == 1).Select(o => o).FirstOrDefault();

                        if (alreadyvalue != null)
                        {
                            alreadyvalue.ProjectId = model.ProjectId;
                            alreadyvalue.PhaseName = model.ProjectphaseId;
                            alreadyvalue.TaskName = model.Taskid;
                            alreadyvalue.StartDate = model.StartDate;
                            alreadyvalue.EndDate = model.EndDate;
                            alreadyvalue.NoOfEfforts = model.NumberOfEfforts;
                            //   obj_Comp.Employees = model.userid;
                            alreadyvalue.Employees = Convert.ToInt32(model.SelectedEmpList[i]);
                            alreadyvalue.SelectedEmployess = model.multiselectemployees;
                            alreadyvalue.TaskStatus = model.tasktypeid;
                            alreadyvalue.Isreject = false;
                            alreadyvalue.Approved = false;
                            db.SaveChanges();

                        }
                        else
                        {
                            DSRCManagementSystem.TS_AssignedTask objc = new DSRCManagementSystem.TS_AssignedTask();
                            objc.ProjectId = model.ProjectId;
                            objc.PhaseName = model.ProjectphaseId;
                            objc.TaskName = model.Taskid;
                            objc.StartDate = model.StartDate;
                            objc.EndDate = model.EndDate;
                            objc.NoOfEfforts = model.NumberOfEfforts;
                            //   obj_Comp.Employees = model.userid;
                            objc.Employees = Convert.ToInt32(model.SelectedEmpList[i]);
                            objc.SelectedEmployess = model.multiselectemployees;
                            objc.TaskStatus = model.tasktypeid;
                            objc.Isreject = false;
                            objc.Approved = false;
                            objc.ISdelete = false;
                            objc.IsActive = false;
                            objc.flag = 1;
                            db.AddToTS_AssignedTask(objc);



                        }


                    }

                    db.SaveChanges();




                    TempData["new assigntaskedit"] = 1;
                    //}
                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json("Success", JsonRequestBehavior.AllowGet);
        }


        //[HttpPost]
        //public ActionResult AssignTskEdit(AssignTaskModel model)
        //{
        //    using (DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1())
        //    {
        //        string UserName = " ";
        //        foreach (int id in model.SelectedEmpList)
        //        {
        //            UserName = db.Users.Where(o => o.UserID == id).Select(o => o.FirstName + " " + o.LastName ?? "").FirstOrDefault();
        //            string fdate = Convert.ToString(model.StartDate);
        //            string tdate = Convert.ToString(model.EndDate);
        //            var fromdate = DateTime.Parse(fdate);
        //            var todate = DateTime.Parse(tdate);
        //            bool overlap = db.TS_AssignedTask.FirstOrDefault(x =>
        //                     EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(todate)
        //                     && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(fromdate) && x.Employees == id && x.IsActive == true) != null;


        //            if (overlap)
        //            {
        //                var result = new { message = "Already", name = UserName };
        //                return Json(new { message = "Already", name = UserName });
        //            }
        //        }


        //        var obj_Comp = db.TS_AssignedTask.Where(o => o.AssignedTaskId == model.assigntaskid && o.IsActive == true).Select(o => o).FirstOrDefault();


        //        obj_Comp.ProjectId = model.ProjectId;
        //        obj_Comp.PhaseName = model.ProjectphaseId;
        //        obj_Comp.TaskName = model.Taskid;
        //        obj_Comp.StartDate = model.StartDate;
        //        obj_Comp.EndDate = model.EndDate;
        //        obj_Comp.NoOfEfforts = model.NumberOfEfforts;
        //        obj_Comp.Employees = model.userid;
        //        obj_Comp.TaskStatus = model.tasktypeid;


        //        db.SaveChanges();


        //        return Json("Success", JsonRequestBehavior.AllowGet);
        //    }
        //}
        //  [HttpPost]
        //public ActionResult DeleteAssignTask(int assigntaskid) 
        //{
        //    DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
        //    var value = db.TS_AssignedTask.Where(x => x.AssignedTaskId == assigntaskid).Select(o => o).FirstOrDefault();  
        //        value.IsActive = false;
        //        value.ISdelete = true;
        //        db.SaveChanges();
        //        TempData["DeleteAssignTask"] = 1;
        //    return Json("Success", JsonRequestBehavior.AllowGet);
        //}


        [HttpPost]
        public ActionResult AssignTaskDelete(int assigntaskid)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var obj = objdb.TS_AssignedTask.Where(x => x.AssignedTaskId == assigntaskid && x.flag == 0).Select(o => o).FirstOrDefault();
                obj.IsActive = false;
                obj.ISdelete = true;
                objdb.SaveChanges();
                TempData["AsssignTaskDelete"] = 1;
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json("Success", JsonRequestBehavior.AllowGet);

        }


        public ActionResult Employees(int taskid, int projectid)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var userId = (int)Session["UserId"];
                var employees = (from p in objdb.TS_AssignedTask.Where(x => x.ProjectId == projectid && x.TaskName == taskid && x.IsActive == true)
                                 join u in objdb.Users on p.Employees equals u.UserID
                                 select new AssignTaskModel()
                                 {

                                     userid = u.UserID,
                                     Employees = u.FirstName + " " + u.LastName ?? ""
                                 }).ToList();
                ViewBag.Employees = new SelectList(employees, "userid", "Employees");
                //var employees = objdb.TS_AssignedTask.Where(x => x.TaskName == taskid && x.ProjectId == projectid).Select(x=>x.Employees).ToList();


                var unassigned = (from p in objdb.UserProjects.Where(x => x.ProjectID == projectid)

                                  join u in objdb.Users on p.UserID equals u.UserID
                                  select new AssignTaskModel()
                                  {
                                      unuserid = u.UserID,
                                      unemployees = u.FirstName + " " + u.LastName ?? ""

                                  }).ToList();
                ViewBag.unassignemployees = new SelectList(unassigned, "unuserid", "unemployees");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }


        [HttpGet]

        public ActionResult EditTask(int taskid)
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            AddTaskModel taskobj = new AddTaskModel();
            try
            {
                var userId = (int)Session["UserId"];





                taskobj = (from p in db.TS_Task.Where(x => x.ISACTIVE == true && x.UserId == userId && x.TaskId == taskid)
                           join t in db.PhaseTaskTypeMappings on p.TaskStatus equals t.TaskTypeID
                           join u in db.Projects on p.ProjectName equals u.ProjectID
                           join c in db.ProjectPhases on p.PhaseNameId equals c.ProjectPhaseId
                           join e in db.Master_PhaseStatus on p.PhaseStatus equals e.PhaseStatusId
                           select new DSRCManagementSystem.Models.AddTaskModel
                           {
                               ID = p.TaskId,
                               ProjectName = u.ProjectName,
                               PhaseName = c.Phase,
                               PhaseStatus = e.PhaseStatusName,
                               Taskstatus = t.TaskTypeName,
                               TaskName = p.TaskName,
                               StartDate = p.StartDate,
                               EndDate = p.EndDATE,
                               Efforts = p.NoOfEfforts,
                               IsOpen = p.IsOpened,
                               PhaseNameId = p.PhaseNameId,
                               ProjectId = u.ProjectID
                           }).Distinct().OrderByDescending(x => x.StartDate).FirstOrDefault();

                DateTime d1 = Convert.ToDateTime(taskobj.StartDate);
                string d = d1.ToShortDateString();
                taskobj.Start = d;

                DateTime d2 = Convert.ToDateTime(taskobj.EndDate);
                string d3 = d2.ToShortDateString();
                taskobj.End = d3;

                var openstate = (from p in db.Master_openclose
                                 select new
                                 {

                                     OpenId = p.StateId,
                                     Openstate = p.State

                                 }).ToList();

                if (taskobj.IsOpen == true)
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate", "1");
                }

                else if (taskobj.IsOpen == false)
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate", "2");
                }

               //if (objedit.EndTime > System.DateTime.Now)
                //{
                //    ViewBag.IsOpen = new SelectList(openclose, "StatusId", "Status", "i");
                //}
                //else if (objedit.EndTime < System.DateTime.Now)
                //{
                //    ViewBag.IsOpen = new SelectList(openclose, "StatusId", "Status", "j");
                //}
                else
                {
                    ViewBag.IsOpen = new SelectList(openstate, "OpenId", "Openstate");
                }






                //if (taskobj.IsOpen == true)
                //{
                //    ViewBag.IsOpen = new SelectList(new[] { new { Text = "Yes", Value = 0 }, new { Text = "No", Value = 1 } }, "Value", "Text", 0);
                //}
                //else
                //{
                //    ViewBag.IsOpen = new SelectList(new[] { new { Text = "Yes", Value = 0 }, new { Text = "No", Value = 1 } }, "Value", "Text", 1);

                //}
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(taskobj);
        }

        [HttpPost]
        public ActionResult EditTask(AddTaskModel atm)
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            try
            {
                var userId = (int)Session["UserId"];
                ViewBag.IsOpen = new SelectList(new[] { new { Text = "Yes", Value = 0 }, new { Text = "No", Value = 1 } }, "Value", "Text", 0);
                var record = db.TS_Task.FirstOrDefault(x => (x.TaskId == atm.ID));
                var objtask = db.TS_Task.Where(x => x.TaskId == atm.ID && x.ISACTIVE == true).FirstOrDefault();
                ProjectPhaseLog obj = new ProjectPhaseLog();

                DateTime startdate;
                DateTime enddate;

                startdate = (DateTime)db.ProjectPhases.FirstOrDefault(x => x.Phase == atm.PhaseName).StartDate;
                enddate = (DateTime)db.ProjectPhases.FirstOrDefault(x => x.Phase == atm.PhaseName).EndDate;
                string start = startdate.ToString("dd/MM/yyyy");
                string end = enddate.ToString("dd/MM/yyyy");

                //var already = db.TS_Task.Where(x => x.StartDate == atm.StartDate && x.EndDATE == atm.EndDate && x.ProjectName == atm.ProjectId && x.TaskName == atm.TaskName && (x.IsDelete == false || x.IsDelete == null)).Select(o => o).FirstOrDefault();







                //if (already != null)
                //{
                //    return Json("AlreadyAssigned", JsonRequestBehavior.AllowGet);
                //}

                if (objtask.TaskName != atm.TaskName && objtask.StartDate != atm.StartDate && objtask.EndDATE != atm.EndDate && objtask.NoOfEfforts != atm.Efforts)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name/Start Date/EndDate/No.Of Efforts";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName + "/" + atm.StartDate.ToString() + "/" + atm.EndDate.ToString() + "/" + atm.Efforts;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName + "/" + objtask.StartDate.ToString() + "/" + objtask.EndDATE.ToString() + "/" + objtask.NoOfEfforts;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.TaskName != atm.TaskName && objtask.StartDate != atm.StartDate && objtask.EndDATE != atm.EndDate)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name/Start Date/EndDate/";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName + "/" + atm.StartDate.ToString() + "/" + atm.EndDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName + "/" + objtask.StartDate.ToString() + "/" + objtask.EndDATE.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.TaskName != atm.TaskName && objtask.StartDate != atm.StartDate)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name/Start Date/";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName + "/" + atm.StartDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName + "/" + objtask.StartDate.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.TaskName != atm.TaskName && objtask.EndDATE != atm.EndDate)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name/EndDate/";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName + "/" + atm.EndDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName + "/" + objtask.EndDATE.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.TaskName != atm.TaskName && objtask.NoOfEfforts != atm.Efforts)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name/Efforts/";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName + "/" + atm.Efforts;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName + "/" + objtask.NoOfEfforts;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.StartDate != atm.StartDate && objtask.EndDATE != atm.EndDate)
                {
                    bool overlapping = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(atm.StartDate)
                         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;
                    //bool overlap = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(atm.StartDate)
                    //     && EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseId && x.IsACTIVE == true) != null;
                    //bool avail = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(atm.StartDate)
                    //     && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseId && x.IsACTIVE == true) != null;

                    if (!overlapping)
                    {
                        var result = new { message = "timeexceed", sdate = start, edate = end };
                        return Json(new { message = "timeexceed", sdate = start, edate = end });
                    }
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "StartDate/EndDate";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.StartDate.ToString() + "/" + atm.EndDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.StartDate.ToString() + "/" + objtask.EndDATE.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.StartDate != atm.StartDate && objtask.EndDATE != atm.EndDate && objtask.NoOfEfforts != atm.Efforts)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "StartDate/EndDate/No.Of Efforts";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.StartDate.ToString() + "/" + atm.EndDate.ToString() + " / " + atm.Efforts;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.StartDate.ToString() + "/" + objtask.EndDATE.ToString() + "/" + objtask.NoOfEfforts;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.StartDate != atm.StartDate && objtask.NoOfEfforts != atm.Efforts)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "StartDate/No.Of Efforts";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.StartDate.ToString() + " / " + atm.Efforts;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.StartDate.ToString() + "/" + objtask.NoOfEfforts;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.EndDATE != atm.EndDate && objtask.NoOfEfforts != atm.Efforts && objtask.TaskName != atm.TaskName)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "EndDate/No.Of Efforts/Task Name";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.EndDate.ToString() + " / " + atm.Efforts + " / " + atm.TaskName;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.EndDATE.ToString() + "/" + objtask.NoOfEfforts + " / " + objtask.TaskName;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.EndDATE != atm.EndDate && objtask.NoOfEfforts != atm.Efforts)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "EndDate/No.Of Efforts";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.EndDate.ToString() + " / " + atm.Efforts;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.EndDATE.ToString() + "/" + objtask.NoOfEfforts;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }

                else if (objtask.EndDATE != atm.EndDate && objtask.TaskName != atm.TaskName)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "EndDate/Task Name";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.EndDate.ToString() + " / " + atm.TaskName;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.EndDATE.ToString() + " / " + objtask.TaskName;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }
                else if (objtask.NoOfEfforts != atm.Efforts && objtask.TaskName != atm.TaskName && objtask.StartDate != atm.StartDate)
                {
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "No.Of Efforts/Task Name/Start Date";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.Efforts + " / " + atm.TaskName + " / " + atm.StartDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.NoOfEfforts + " / " + objtask.TaskName + " / " + objtask.StartDate.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }
                else if (objtask.NoOfEfforts != atm.Efforts)
                {
                    int y = 0;

                    var value = db.ProjectPhases.Where(x => x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true).Select(o => o.NoOfEfforts).FirstOrDefault();


                    List<int> Total = new List<int>();

                    Total = db.TS_Task.Where(x => x.PhaseNameId == atm.PhaseNameId && x.ISACTIVE == true).Select(o => o.NoOfEfforts).ToList();

                    if (Total.Count() != 1)
                    {
                        for (int z = 0; z < Total.Count(); z++)
                        {

                            y += Total[z];

                        }

                        if ((y + atm.Efforts) > value)
                        {
                            return Json("greater", JsonRequestBehavior.AllowGet);
                        }

                    }

                    else
                    {
                        if (value < atm.Efforts)
                        {
                            return Json("greater", JsonRequestBehavior.AllowGet);

                        }

                    }

                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "No.Of Efforts";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.Efforts.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.NoOfEfforts.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }
                else if (objtask.TaskName != atm.TaskName)
                {
                    var alreadyname = db.TS_Task.Where(x => x.ProjectName == atm.ProjectId && x.TaskName == atm.TaskName).Select(o => o).FirstOrDefault();
                    if (alreadyname != null)
                    {

                        return Json("AlreadyAssigned", JsonRequestBehavior.AllowGet);

                    }
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Task Name";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.TaskName;
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.TaskName;
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }
                else if (objtask.StartDate != atm.StartDate)
                {
                    //bool overlapping = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(atm.StartDate)
                    //    && EntityFunctions.TruncateTime(x.EndDate) > EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;
                    //bool overlap = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) > EntityFunctions.TruncateTime(atm.StartDate)
                    //    && EntityFunctions.TruncateTime(x.EndDate) <= EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;
                    bool overlapping = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(atm.StartDate)
                         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;

                    if (!overlapping)
                    {
                        var result = new { message = "timeexceed", sdate = start, edate = end };
                        return Json(new { message = "timeexceed", sdate = start, edate = end });
                    }
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "Start Date";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.StartDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.StartDate.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }
                else if (objtask.EndDATE != atm.EndDate)
                {
                    //bool overlapping = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(atm.StartDate)
                    //    && EntityFunctions.TruncateTime(x.EndDate) > EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;
                    //bool overlap = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) < EntityFunctions.TruncateTime(atm.StartDate)
                    //   && EntityFunctions.TruncateTime(x.EndDate) < EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;
                    bool overlapping = db.ProjectPhases.FirstOrDefault(x => EntityFunctions.TruncateTime(x.StartDate) <= EntityFunctions.TruncateTime(atm.StartDate)
                         && EntityFunctions.TruncateTime(x.EndDate) >= EntityFunctions.TruncateTime(atm.EndDate) && x.ProjectPhaseId == atm.PhaseNameId && x.IsACTIVE == true) != null;

                    if (!overlapping)
                    {
                        var result = new { message = "timeexceed", sdate = start, edate = end };
                        return Json(new { message = "timeexceed", sdate = start, edate = end });
                    }
                    obj.ChangedBy = userId;
                    obj.ColumnChanged = "End Date";
                    obj.TableName = "TS_Task";
                    obj.CurrentValue = atm.EndDate.ToString();
                    obj.date = System.DateTime.Now;
                    obj.PreviousValue = objtask.EndDATE.ToString();
                    obj.TableId = 246291937;
                    db.AddToProjectPhaseLogs(obj);
                    db.SaveChanges();
                }


                //if (record != null)
                //{

                //}
                //if (objtask.NoOfEfforts != atm.Efforts && objtask.TaskName != atm.TaskName && objtask.StartDate != atm.StartDate)
                //{
                //}

                if (record != null)
                {



                    record.PhaseName = atm.PhaseName;
                    record.TaskName = atm.TaskName;
                    record.NoOfEfforts = atm.Efforts;
                    record.StartDate = atm.StartDate;
                    record.EndDATE = atm.EndDate;
                    //record.IsOpened = atm.Isopened== 0 ? true : false;
                    if (atm.Isopened == 1)
                    {
                        record.IsOpened = true;
                    }
                    else if (atm.Isopened == 2)
                    {
                        record.IsOpened = false;
                    }
                    db.SaveChanges();
                    // }
                    TempData["new addtaskedit"] = 1;
                    return Json("Success", JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json("Success", JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public ActionResult DeleteTask(int ID)
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            try
            {
                var obj = db.TS_Task.Where(x => x.TaskId == ID).Select(r => r).FirstOrDefault();
                obj.ISACTIVE = false;
                obj.IsDelete = true;
                db.SaveChanges();
                TempData["deletetask"] = 1;
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json("Success", JsonRequestBehavior.AllowGet);
        }

        private static string GetUserString(DSRCManagementSystemEntities1 db, string Attendee)
        {
            var Temp = "";
            if (Attendee != null)
            {
                List<int> lst = new List<int>();
                foreach (var str in Attendee.Split(','))
                {
                    lst.Add(Convert.ToInt32(str));
                }
                var obj = (from user in db.Users.Where(user => lst.Contains(user.UserID)) select user.FirstName + " " + (user.LastName ?? "")).ToList();
                var tmp = "";
                int len = obj.Count; int i = 0;
                foreach (var str in obj)
                {
                    i++;
                    tmp += str;
                    if (i < len)
                    {
                        tmp += ", ";
                    }
                }
                return tmp;
            }
            return Temp;
        }




        public ActionResult Isreject(int TaskId)
        {

            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.Models.Isreject obj = new DSRCManagementSystem.Models.Isreject();
            try
            {
                int TaskID = Convert.ToInt32(TaskId);
                var userId = (int)Session["UserId"];

                obj.Reason = objdb.TS_AssignedTask.Where(x => x.TaskName == TaskID && x.Employees == userId && x.flag == 1).Select(o => o.Reason).FirstOrDefault();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(obj);
        }
        [HttpGet]
        public ActionResult TimeSheetManagement(string LastWeek, string Week)
        {
            //Getting User Id
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.Models.StudentModel obj = new DSRCManagementSystem.Models.StudentModel();
            try
            {
                var userId = (int)Session["UserId"];

                string User = Convert.ToString(userId);

                var date = DateTime.Now;

                DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

                while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
                    date = date.AddDays(1);

                var result = (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;

                var firstdateofweek = DateTime.Now;
                var cal = System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar;
                Dictionary<string, DateTime> currentWeek = new Dictionary<string, DateTime>();
                Dictionary<string, DateTime> nextWeek = new Dictionary<string, DateTime>();

                var weekofYear = cal.GetWeekOfYear(DateTime.Now, System.Globalization.CalendarWeekRule.FirstDay, System.DayOfWeek.Monday);
                firstdateofweek = FirstDateOfWeek(DateTime.Now.Year, weekofYear, CultureInfo.CurrentCulture);
                int i = 0;
                while (i != 12) // skiped weeekend days...
                {
                    if (i < 7)
                        currentWeek.Add(firstdateofweek.AddDays(i).DayOfWeek.ToString(), firstdateofweek.AddDays(i).Date);
                    else if (i >= 7)
                        nextWeek.Add(firstdateofweek.AddDays(i).DayOfWeek.ToString(), firstdateofweek.AddDays(i).Date);

                    i++;
                }

                int k = currentWeek.Count();







                // Getting Screen With Respect To The Calendar Change

                if (Week != null)
                {

                    DateTime val1 = Convert.ToDateTime(Week);
                    var date2 = val1.Date;

                    //starting Date of week

                    DayOfWeek fdow = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
                    int offset = fdow - date2.DayOfWeek;
                    DateTime fdowDate = date2.AddDays(offset);
                    var Startingdate = fdowDate;

                    // ending Date of week

                    DateTime ldowDate = fdowDate.AddDays(6);
                    var Endingdate = ldowDate;

                    // Getting Monday To Friday values

                    var MonDay = Startingdate;
                    var TuesDay = MonDay.AddDays(1);
                    var WednesDay = TuesDay.AddDays(1);
                    var ThursDay = WednesDay.AddDays(1);
                    var FriDay = ThursDay.AddDays(1);
                    var SaturDay = FriDay.AddDays(1);
                    var SunDay = SaturDay.AddDays(1);

                    DateTime? start1 = Startingdate;
                    DateTime? start2 = TuesDay;
                    DateTime? start3 = WednesDay;
                    DateTime? start4 = ThursDay;
                    DateTime? start5 = FriDay;
                    // Getting THe Screen



                    obj.StartDate = Week;


                    List<taskName> task = new List<taskName>();

                    //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                    //        select new DSRCManagementSystem.Models.taskName
                    //        {
                    //            id = p.TaskId,
                    //            taskname = p.TaskName
                    //        }).ToList();


                    var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                    //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                    //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                    //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                    //        from y1 in yg.DefaultIfEmpty()
                    //        select new DSRCManagementSystem.Models.taskName
                    //        {
                    //            id = p.TaskId,
                    //            taskname = p.TaskName,
                    //            Monday = y1.Monday,
                    //            Tuesday = y1.Tuesday,
                    //            Wednesday = y1.Wednesday,
                    //            Thursday = y1.Thursday,
                    //            Friday = y1.Friday,
                    //            Total = y1.Total,
                    //            ProjectId=p.ProjectName
                    //        }).ToList();

                    //task = (from p in db.TS_AssignedTask.Where(x => x.Employees == userId && x.ISdelete != true && ((x.StartDate >= MonDay && x.EndDate <= FriDay
                    //       ) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay)||(x.StartDate == MonDay && x.EndDate >= FriDay)))
                    //        join w in db.TS_Task on p.TaskName equals w.TaskId
                    //        join ts in db.TotalWorkingHours.Where(x => x.UserId == userId && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == FriDay) on w.TaskId equals ts.TaskId into yg
                    //        from y1 in yg.DefaultIfEmpty()
                    //        select new DSRCManagementSystem.Models.taskName
                    //        {
                    //            id = w.TaskId,
                    //            taskname = w.TaskName,
                    //            Monday = y1.Monday,
                    //            Tuesday = y1.Tuesday,
                    //            Wednesday = y1.Wednesday,
                    //            Thursday = y1.Thursday,
                    //            Friday = y1.Friday,
                    //            Total = y1.Total,
                    //            ProjectId = w.ProjectName,
                    //            Isreject = p.Isreject
                    //        }).ToList();




                    task = (from p in db.TS_AssignedTask.Where(x => x.Employees == userId && x.ISdelete != true && x.flag == 1 && (x.Isreject == true || x.Isreject != true) && ((x.StartDate >= MonDay && x.EndDate <= FriDay
                      ) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay && x.EndDate == FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                            join w in db.TS_Task on p.TaskName equals w.TaskId
                            join r in db.Projects on p.ProjectId equals r.ProjectID
                            join t in db.ProjectPhases on w.PhaseNameId equals t.ProjectPhaseId
                            join ts in db.TotalWorkingHours.Where(x => x.UserId == userId && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5) on p.AssignedTaskId equals ts.AssignTaskId into yg
                            from y1 in yg.DefaultIfEmpty()
                            select new DSRCManagementSystem.Models.taskName
                            {
                                ProjectName = r.ProjectName,
                                PhaseName = t.Phase,
                                id = w.TaskId,
                                taskname = w.TaskName,
                                Monday = y1.Monday,
                                Tuesday = y1.Tuesday,
                                Wednesday = y1.Wednesday,
                                Thursday = y1.Thursday,
                                Friday = y1.Friday,
                                Total = y1.Total,
                                ProjectId = w.ProjectName,
                                Isreject = p.Isreject,
                                Issave = w.IsSave,
                                Approved = y1.Approved,
                                ProjectCompleteDetails = r.ProjectName + "-" + t.Phase + "-" + w.TaskName
                            }).Distinct().ToList();




                    foreach (var item in task)
                    {
                        if (item.Isreject == true)
                        {
                            //  obj.Isreject = true;
                            obj.Isreject = true;
                        }
                        if (item.Issave == true)
                        {
                            obj.Issave = true;
                        }
                    }






                    int u = 0;

                    for (k = 0; k < task.Count(); k++)
                    {
                        if (task[k].Total != "")
                        {
                            u += Convert.ToInt32(task[k].Total);
                        }
                    }

                    obj.Weekhours = u;
                    DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                    List<string> week = new List<string>();
                    week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                    int number = week.Count();
                    int z = 0;
                    for (int v = 0; v < number; v++)
                    {
                        z += Convert.ToInt32(week[v]);
                    }




                    if (task.Count() == 0)
                    {

                        int taskcount = task.Count();
                        obj.Count = taskcount;

                        List<Taskname> objtotal = new List<Taskname>();

                        obj.TaskName = objtotal;


                        for (int t = 0; t < taskcount; t++)
                        {

                            objtotal.Add(new Taskname
                            {
                                Task = task[t].taskname.ToString(),
                                id = task[t].id,
                                Monday = task[t].Monday,
                                Tuesday = task[t].Tuesday,
                                Wednesday = task[t].Wednesday,
                                Thursday = task[t].Thursday,
                                Friday = task[t].Friday,
                                Total = task[t].Total,
                                ProjectId = task[t].ProjectId,
                                ProjectCompleteDetails = task[t].ProjectCompleteDetails
                            });
                        }

                        List<Student> n = new List<Student>();
                        obj.StudentList = n;
                        n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                        n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                        n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                        n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                        n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                        n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                        n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                        LastWeek = "";
                        return View(obj);
                    }

                    else
                    {

                        if (task.Count() != 0)
                        {
                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();


                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {
                                if (task[t].Total == null && task[t].Approved == null)
                                {
                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = null,
                                        Tuesday = null,
                                        Wednesday = null,
                                        Thursday = null,
                                        Friday = null,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });

                                }
                                else if (task[t].Total != null && task[t].Approved == 0)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });


                                }

                                else if (task[t].Total != null && task[t].Approved == 1)
                                {

                                    List<Student> n = new List<Student>();
                                    obj.StudentList = n;
                                    n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                    n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                    n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                    n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                    n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                    n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                    n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                                    LastWeek = "";

                                }

                            }
                            foreach (var item in task)
                            {
                                if (item.Isreject == true)
                                {
                                    obj.Isreject = true;
                                }
                                if (item.Issave == true)
                                {
                                    obj.Issave = true;
                                }
                            }




                            List<Student> a = new List<Student>();
                            obj.StudentList = a;
                            a.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            a.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            a.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            a.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            a.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            a.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            a.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                            var w = a.Count();


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                            // Holiday
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }



                            //1)  //Leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;

                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday5 != null || overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;

                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }

                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                            }


                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;

                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;


                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    // obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    // obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    // obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            else
                            {

                            }

                        }

                        int y = 0;
                        int l = 0;
                        for (int x = 0; x < task.Count(); x++)
                        {
                            y += Convert.ToInt32(obj.StudentList[6].Total);
                        }

                        foreach (var item in task)
                        {
                            l += Convert.ToInt32(item.Total);
                        }
                        obj.Weekhours = y + l;
                        return View(obj);

                    }



                }




                //Four Button Process







                if (LastWeek != null && LastWeek != "")
                {
                    var MonDay1 = Convert.ToDateTime(LastWeek);
                    var MonDay = MonDay1.Date;
                    var TuesDay1 = Convert.ToDateTime(LastWeek).AddDays(1);
                    var TuesDay = TuesDay1.Date;
                    var WednesDay1 = Convert.ToDateTime(LastWeek).AddDays(2);
                    var WednesDay = WednesDay1.Date;
                    var ThursDay1 = Convert.ToDateTime(LastWeek).AddDays(3);
                    var ThursDay = ThursDay1.Date;
                    var FriDay1 = Convert.ToDateTime(LastWeek).AddDays(4);
                    var FriDay = FriDay1.Date;
                    var SaturDay1 = Convert.ToDateTime(LastWeek).AddDays(5);
                    var SaturDay = SaturDay1.Date;
                    var SunDay1 = Convert.ToDateTime(LastWeek).AddDays(6);
                    var SunDay = SunDay1.Date;
                    //  DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();



                    DateTime? start1 = MonDay;
                    DateTime? start2 = TuesDay;
                    DateTime? start3 = WednesDay;
                    DateTime? start4 = ThursDay;
                    DateTime? start5 = FriDay;


                    List<taskName> task = new List<taskName>();

                    //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                    //        select new DSRCManagementSystem.Models.taskName
                    //        {
                    //            id = p.TaskId,
                    //            taskname = p.TaskName
                    //        }).ToList();


                    var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                    //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                    //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                    //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                    //        from y1 in yg.DefaultIfEmpty()
                    //        select new DSRCManagementSystem.Models.taskName
                    //        {
                    //            id = p.TaskId,
                    //            taskname = p.TaskName,
                    //            Monday = y1.Monday,
                    //            Tuesday = y1.Tuesday,
                    //            Wednesday = y1.Wednesday,
                    //            Thursday = y1.Thursday,
                    //            Friday = y1.Friday,
                    //            Total = y1.Total,
                    //            ProjectId=p.ProjectName
                    //        }).ToList();

                    task = (from p in db.TS_AssignedTask.Where(x => x.Employees == userId && x.ISdelete != true && x.flag == 1 && (x.Isreject != true || x.Isreject == true) && ((x.StartDate >= MonDay && x.EndDate <= FriDay
                            ) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay) && (x.EndDate == FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                            join w in db.TS_Task on p.TaskName equals w.TaskId
                            join r in db.Projects on p.ProjectId equals r.ProjectID
                            join t in db.ProjectPhases on w.PhaseNameId equals t.ProjectPhaseId
                            join ts in db.TotalWorkingHours.Where(x => x.UserId == userId && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5) on p.AssignedTaskId equals ts.AssignTaskId into yg
                            from y1 in yg.DefaultIfEmpty()
                            select new DSRCManagementSystem.Models.taskName
                            {
                                ProjectName = r.ProjectName,
                                PhaseName = t.Phase,
                                id = w.TaskId,
                                taskname = w.TaskName,
                                Monday = y1.Monday,
                                Tuesday = y1.Tuesday,
                                Wednesday = y1.Wednesday,
                                Thursday = y1.Thursday,
                                Friday = y1.Friday,
                                Total = y1.Total,
                                ProjectId = w.ProjectName,
                                Isreject = p.Isreject,
                                Issave = w.IsSave,
                                Approved = y1.Approved,
                                ProjectCompleteDetails = r.ProjectName + "-" + t.Phase + "-" + w.TaskName
                            }).Distinct().ToList();


                    foreach (var item in task)
                    {
                        if (item.Isreject == true)
                        {

                            obj.Isreject = true;
                        }
                        if (item.Issave == true)
                        {
                            obj.Issave = true;
                        }
                    }



                    int u = 0;

                    for (k = 0; k < task.Count(); k++)
                    {
                        if (task[k].Total != "")
                        {
                            u += Convert.ToInt32(task[k].Total);
                        }
                    }

                    obj.Weekhours = u;
                    DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                    List<string> week = new List<string>();
                    week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                    int number = week.Count();
                    int z = 0;
                    for (int v = 0; v < number; v++)
                    {
                        z += Convert.ToInt32(week[v]);
                    }




                    if (task.Count() == 0)
                    {

                        int taskcount = task.Count();
                        obj.Count = taskcount;

                        List<Taskname> objtotal = new List<Taskname>();

                        obj.TaskName = objtotal;


                        for (int t = 0; t < taskcount; t++)
                        {


                            objtotal.Add(new Taskname
                            {
                                ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                Task = task[t].taskname.ToString(),
                                id = task[t].id,
                                Monday = task[t].Monday,
                                Tuesday = task[t].Tuesday,
                                Wednesday = task[t].Wednesday,
                                Thursday = task[t].Thursday,
                                Friday = task[t].Friday,
                                Total = task[t].Total,
                                ProjectId = task[t].ProjectId,
                                Isreject = task[t].Isreject
                            });
                        }

                        List<Student> n = new List<Student>();
                        obj.StudentList = n;
                        n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                        n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                        n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                        n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                        n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                        n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                        n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                        LastWeek = "";
                        return View(obj);
                    }

                    else
                    {

                        if (task.Count() != 0)
                        {
                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();


                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {
                                if (task[t].Total == null && task[t].Approved == null)
                                {
                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = null,
                                        Tuesday = null,
                                        Wednesday = null,
                                        Thursday = null,
                                        Friday = null,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });

                                }
                                else if (task[t].Total != null && task[t].Approved == 0)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });


                                }

                                else if (task[t].Total != null && task[t].Approved == 1)
                                {

                                    List<Student> n = new List<Student>();
                                    obj.StudentList = n;
                                    n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                    n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                    n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                    n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                    n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                    n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                    n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                                    LastWeek = "";

                                }

                            }





                            List<Student> s = new List<Student>();
                            obj.StudentList = s;
                            s.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            s.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            s.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            s.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            s.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            s.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            s.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                            var w = s.Count();


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                            // Holiday
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }



                            //Leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();




                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;

                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                            }


                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => x.ODStartDate == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }

                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }


                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;


                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            else
                            {

                            }

                        }



                        LastWeek = "";
                        //int y = 0;

                        //for (int x = 0; x < task.Count(); x++)
                        //{
                        //    y += Convert.ToInt32(obj.StudentList[6].Total);
                        //}
                        //obj.Weekhours = y;
                        int y = 0;
                        int l = 0;
                        for (int x = 0; x < task.Count(); x++)
                        {
                            y += Convert.ToInt32(obj.StudentList[6].Total);
                        }

                        foreach (var item in task)
                        {
                            if (item.Total != "")
                            {
                                l += Convert.ToInt32(item.Total);
                            }
                            else
                            {
                                l = 0;
                            }
                        }
                        obj.Weekhours = y + l;

                        return View(obj);

                    }




                }




                else
                {


                    if (result % 2 != 0)
                    {
                        var MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                                .Select(pair => pair.Value)
                                .FirstOrDefault();


                        var TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();




                       // DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();


                        DateTime? start1 = MondayDate1;
                        DateTime? start2 = TuesDayDate1;
                        DateTime? start3 = WednesDayDate1;
                        DateTime? start4 = ThursDayDate1;
                        DateTime? start5 = FridayDate1;

                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();




                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();
                        var assignTsk = from usr in db.TS_AssignedTask where usr.IsActive == true select new { usr.AssignedTaskId, usr.SelectedEmployess };

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                        //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId=p.ProjectName
                        //        }).ToList();

                        List<DSRCManagementSystem.Models.Mulitiselect> objmulti = new List<DSRCManagementSystem.Models.Mulitiselect>();

                        objmulti = (from p in db.TS_AssignedTask.Where(x => x.IsActive == true)
                                    join t in db.TS_Task on p.TaskName equals t.TaskId
                                    select new DSRCManagementSystem.Models.Mulitiselect
                                    {

                                        Employees = p.SelectedEmployess
                                        //  AssigntaskPrimary = p.AssignedTaskId

                                    }).ToList();

                        var assigntaskvalues = db.TS_AssignedTask.Where(x => x.IsActive == true).Select(o => o).ToList();

                        //   var EmployeeValue = db.TS_AssignedTask.Where(x =>).ToList();
                        List<int> objuser = new List<int>();
                        foreach (var item in objmulti)
                        {

                            string[] values = item.Employees.Split(',');
                            for (int y = 0; y < values.Count(); y++)
                            {
                                objuser.Add(Convert.ToInt32(values[y]));

                            }

                        }




                        task = (from p in db.TS_AssignedTask.Where(x => x.Employees == userId &&
       x.ISdelete != true && x.flag == 1 && (x.Isreject != true || x.Isreject == true) && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1
                             ) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate == FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate > MondayDate1 && x.StartDate < FridayDate1 && x.EndDate > FridayDate1)))
                                join w in db.TS_Task on p.TaskName equals w.TaskId
                                join r in db.Projects on p.ProjectId equals r.ProjectID
                                join t in db.ProjectPhases on w.PhaseNameId equals t.ProjectPhaseId
                                join ts in db.TotalWorkingHours.Where(x => x.UserId == userId && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5) on p.AssignedTaskId equals ts.AssignTaskId into yg
                                from y1 in yg.DefaultIfEmpty()
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    ProjectName = r.ProjectName,
                                    PhaseName = t.Phase,
                                    id = w.TaskId,
                                    taskname = w.TaskName,
                                    Monday = y1.Monday,
                                    Tuesday = y1.Tuesday,
                                    Wednesday = y1.Wednesday,
                                    Thursday = y1.Thursday,
                                    Friday = y1.Friday,
                                    Total = y1.Total,
                                    ProjectId = r.ProjectID,
                                    Isreject = p.Isreject,
                                    Approved = y1.Approved,
                                    Issave = w.IsSave,
                                    ProjectCompleteDetails = r.ProjectName + "-" + t.Phase + "-" + w.TaskName
                                }).Distinct().ToList();
                        //task.AddRange(tasks);



                        foreach (var item in task)
                        {
                            if (item.Isreject == true)
                            {

                                obj.Isreject = true;
                            }
                            if (item.Issave == true)
                            {
                                obj.Issave = true;
                            }
                        }



                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int z = 0;
                        for (int v = 0; v < number; v++)
                        {
                            z += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    ProjectId = task[t].ProjectId,
                                    Isreject = task[t].Isreject
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }

                        if (task.Count() != 0)
                        {
                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();


                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {
                                if (task[t].Total == null)
                                {
                                    objtotal.Add(new Taskname
                                   {
                                       ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                       Task = task[t].taskname.ToString(),
                                       id = task[t].id,
                                       Monday = null,
                                       Tuesday = null,
                                       Wednesday = null,
                                       Thursday = null,
                                       Friday = null,
                                       Total = null,
                                       ProjectId = task[t].ProjectId,
                                       Isreject = task[t].Isreject,
                                       Issave = task[t].Issave
                                   });
                                }

                                else if (task[t].Total != null && task[t].Approved == 0)
                                {
                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });

                                }
                                else if (task[t].Total != null && task[t].Approved == 1)
                                {
                                    // int taskcount = task.Count();
                                    obj.Count = taskcount;

                                    //  List<Taskname> objtotal = new List<Taskname>();

                                    obj.TaskName = objtotal;
                                    List<Student> q = new List<Student>();
                                    obj.StudentList = q;
                                    q.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                    q.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                    q.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                    q.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                    q.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                    q.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                    q.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });


                                }
                                //objtotal.Add(new Taskname
                                //{
                                //    ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                //    Task = task[t].taskname.ToString(),
                                //    id = task[t].id,
                                //    Monday = task[t].Monday,
                                //    Tuesday = task[t].Tuesday,
                                //    Wednesday = task[t].Wednesday,
                                //    Thursday = task[t].Thursday,
                                //    Friday = task[t].Friday,
                                //    Total = task[t].Total,
                                //    ProjectId = task[t].ProjectId,
                                //    Isreject = task[t].Isreject
                                //});
                            }





                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });

                            var w = n.Count();


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                            // Holiday
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }



                            //Leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }
                            }


                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => x.ODStartDate == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    // obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                }
                            }

                            else
                            {

                            }

                        }

                        // List<WeekDetails> details=new List<WeekDetails>();

                        // details = (from ts in db.TS_TimeSheetTotalHours
                        //            where ts.UserId == 49 && ts.SaveDate >= MondayDate1 && ts.SaveDate <= FridayDate1
                        //            select new WeekDetails()
                        //            {
                        //                Monday = ts.Monday,
                        //                Tuesday = ts.Tuesday,
                        //                Wednesday = ts.Wednesday,
                        //                Thursday = ts.Thursday,
                        //                Friday = ts.Friday,
                        //                Total = ts.Total
                        //            }).ToList();

                        //foreach (WeekDetails w in details)
                        //{
                        //    obj.StudentList[0].Monday = w.Monday;
                        //    obj.StudentList[1].Tuesday = w.Tuesday;
                        //    obj.StudentList[2].Wednesday = w.Wednesday;
                        //    obj.StudentList[3].Thursday = w.Thursday;
                        //    obj.StudentList[4].Friday = w.Friday;
                        //    obj.StudentList[5].Total = Convert.ToInt32(w.Total);
                        //}
                        //int l = 0;

                        //for (int x = 0; x < task.Count(); x++)
                        //{
                        //    l += Convert.ToInt32(obj.StudentList[6].Total);
                        //}
                        //obj.Weekhours = l; int y = 0;
                        int l = 0;
                        int m = 0;
                        for (int x = 0; x < task.Count(); x++)
                        {
                            m += Convert.ToInt32(obj.StudentList[6].Total);
                        }

                        foreach (var item in task)
                        {
                            if (item.Total != "")
                            {
                                l += Convert.ToInt32(item.Total);
                            }
                            else
                            {
                                l = 0;
                            }
                        }
                        obj.Weekhours = z + l;

                        return View(obj);
                    }
                    else
                    {
                        var MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();



                      //  DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

                        List<taskName> task = new List<taskName>();
                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();

                        DateTime? start1 = MondayDate1;
                        DateTime? start2 = TuesDayDate1;
                        DateTime? start3 = WednesDayDate1;
                        DateTime? start4 = ThursDayDate1;
                        DateTime? start5 = FridayDate1;
                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1)
                        //        join w in db.TS_AssignedTask on p.UserId equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId = p.ProjectName
                        //        }).ToList();


                        task = (from p in db.TS_AssignedTask.Where(x => x.Employees == userId && x.ISdelete != true && x.flag == 1 && x.Approved != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1
                            ) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate > MondayDate1 && x.StartDate < FridayDate1 && x.EndDate > FridayDate1)) || (x.StartDate == MondayDate1 && x.EndDate == FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate >= FridayDate1))
                                join w in db.TS_Task on p.TaskName equals w.TaskId
                                join t in db.ProjectPhases on w.PhaseNameId equals t.ProjectPhaseId
                                join v in db.Projects on t.ProjectID equals v.ProjectID
                                join ts in db.TotalWorkingHours.Where(x => x.UserId == userId && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5) on p.AssignedTaskId equals ts.AssignTaskId into yg
                                from y1 in yg.DefaultIfEmpty()
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    id = w.TaskId,
                                    taskname = w.TaskName,
                                    Monday = y1.Monday,
                                    Tuesday = y1.Tuesday,
                                    Wednesday = y1.Wednesday,
                                    Thursday = y1.Thursday,
                                    Friday = y1.Friday,
                                    Total = y1.Total,
                                    ProjectId = w.ProjectName,
                                    Isreject = p.Isreject,
                                    Issave = w.IsSave,
                                    Approved = y1.Approved,
                                    ProjectCompleteDetails = v.ProjectName + "-" + t.Phase + "-" + w.TaskName
                                }).Distinct().ToList();

                        foreach (var item in task)
                        {
                            if (item.Isreject == true)
                            {

                                obj.Isreject = true;
                            }
                            if (item.Issave == true)
                            {
                                obj.Issave = true;
                            }
                        }


                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname { Task = task[t].taskname.ToString(), id = task[t].id });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }









                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();

                        int number = week.Count();
                        int z = 0;
                        for (int v = 0; v < number; v++)
                        {
                            z += Convert.ToInt32(week[v]);
                        }

                        //    obj.Weekhours = z;


                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;




                        if (task.Count() != 0)
                        {



                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {
                                if (task[t].Total == null)
                                {
                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = null,
                                        Tuesday = null,
                                        Wednesday = null,
                                        Thursday = null,
                                        Friday = null,
                                        Total = null,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });
                                }

                                else if (task[t].Total != null && task[t].Approved == 0)
                                {
                                    objtotal.Add(new Taskname
                                    {
                                        ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        Isreject = task[t].Isreject,
                                        Issave = task[t].Issave
                                    });

                                }
                                else if (task[t].Total != null && task[t].Approved == 1)
                                {
                                    // int taskcount = task.Count();
                                    obj.Count = taskcount;

                                    //  List<Taskname> objtotal = new List<Taskname>();

                                    obj.TaskName = objtotal;
                                    List<Student> q = new List<Student>();
                                    obj.StudentList = q;
                                    q.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                    q.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                    q.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                    q.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                    q.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                    q.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                    q.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });


                                }
                                //objtotal.Add(new Taskname
                                //{
                                //    ProjectCompleteDetails = task[t].ProjectCompleteDetails,
                                //    Task = task[t].taskname.ToString(),
                                //    id = task[t].id,
                                //    Monday = task[t].Monday,
                                //    Tuesday = task[t].Tuesday,
                                //    Wednesday = task[t].Wednesday,
                                //    Thursday = task[t].Thursday,
                                //    Friday = task[t].Friday,
                                //    Total = task[t].Total,
                                //    ProjectId = task[t].ProjectId,
                                //    Isreject = task[t].Isreject
                                //});
                            }



                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();

                            //holiday

                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }

                            //leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();



                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[0].MondayLeave1 = 0;
                                    //obj.StudentList[1].TuesDayLeave1 = 9;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1;

                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    //obj.StudentList[0].MondayLeave1 = 9;
                                    //obj.StudentList[1].TuesDayLeave1 = 9;
                                    //obj.StudentList[2].WednesdayLeave1 = 9;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    //obj.StudentList[0].MondayLeave1 = 9;
                                    //obj.StudentList[1].TuesDayLeave1 = 9;
                                    //obj.StudentList[2].WednesdayLeave1 = 9;
                                    //obj.StudentList[3].ThursdayLeave1 = 9;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[0].MondayLeave1 = 9;
                                    //obj.StudentList[1].TuesDayLeave1 = 9;
                                    //obj.StudentList[2].WednesdayLeave1 = 9;
                                    //obj.StudentList[3].ThursdayLeave1 = 9;
                                    //obj.StudentList[4].FridayLeave1 = 9;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[9].MondayLeave1 = 0;
                                    //obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[2].WednesdayLeave1 = 0;
                                    //obj.StudentList[3].ThursdayLeave1 = 0;
                                    //obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total =obj.StuudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;

                                }

                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;

                                }

                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    // obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //  obj.StudentList[6].Total =obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;

                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    //  obj.StudentList[6].Total = obj.StudentList[3].ThursdayLeave1;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    // obj.StudentList[6].Total =obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && x.UserId == userId && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 0;
                                    obj.StudentList[1].TuesDayLeave1 = 0;
                                    obj.StudentList[2].WednesdayLeave1 = 0;
                                    obj.StudentList[3].ThursdayLeave1 = 0;
                                    obj.StudentList[4].FridayLeave1 = 0;
                                    //obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;

                                }
                            }



                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => x.ODStartDate == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();

                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();

                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;


                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && x.Userid == userId && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (overall != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                }
                            }
                        }

                        else
                        {
                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {
                                objtotal.Add(new Taskname { Task = task[t].taskname.ToString(), id = task[t].id });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }

                        //int y = 0;

                        //for (int x = 0; x < task.Count(); x++)
                        //{
                        //    y += Convert.ToInt32(obj.StudentList[6].Total);
                        //}
                        //obj.Weekhours = y;
                        int l = 0;
                        int y = 0;
                        for (int x = 0; x < task.Count(); x++)
                        {
                            y += Convert.ToInt32(obj.StudentList[6].Total);
                        }

                        foreach (var item in task)
                        {
                            if (item.Total != "")
                            {
                                l += Convert.ToInt32(item.Total);
                            }

                            else
                            {
                                l = 0;
                            }
                        }
                        obj.Weekhours = y + l;

                        // obj.Weekhours = y;


                    }
                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(obj);
        }

        public static DateTime FirstDateOfWeek(int year, int weekOfYear, System.Globalization.CultureInfo ci)
        {
            DateTime jan1 = new DateTime(year, 1, 1);
            int daysOffset = (int)ci.DateTimeFormat.FirstDayOfWeek - (int)jan1.DayOfWeek;
            DateTime firstWeekDay = jan1.AddDays(daysOffset);
            int firstWeek = ci.Calendar.GetWeekOfYear(jan1, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek);
            if (firstWeek <= 1 || firstWeek > 50)
            {
                weekOfYear -= 1;
            }
            return firstWeekDay.AddDays(weekOfYear * 7);
        }

        [HttpGet]
        public ActionResult Total(string t1, string t2, string t3, string t4, string t5, string t6, string t7, int total)
        {
            string Value = "";
            string Message = "";
            try
            {

                int a, b, c, d, e, f, g;

                if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);

                }

                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    c = Convert.ToInt32(t3);
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }


                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }


                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }

                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }

                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }

                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);

                }


                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }

                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }

                else if (t1 != "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }

                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else
                {
                    a = 0;
                    // weekhours += a;
                }



                if (t2 != "" && t1 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    // weekhours +=   b;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    b = 0;
                    d = 0;
                    e = 0;
                    a = Convert.ToInt32(t1);
                    c = Convert.ToInt32(t3);

                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }

                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }

                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t5);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else
                {
                    b = 0;
                    //  weekhours +=  b;
                }



                if (t3 != "" && t1 != "" && t2 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    // weekhours += c;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else
                {
                    c = 0;
                    // weekhours += c;
                }



                if (t4 != "" && t1 != "" && t2 != "" && t3 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    // weekhours +=   d;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else
                {
                    d = 0;
                    //  weekhours += d;
                }

                if (t5 != "" && t1 != "" && t2 != "" && t3 != "" && t4 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                    //  weekhours  += e;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 != "" && t5 == "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = 0;
                }
                else if (t1 == "" && t2 == "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else
                {
                    e = 0;
                    //  weekhours +=  e;
                }
                if (t6 != "")
                {
                    f = Convert.ToInt32(t6);
                }
                else
                {
                    f = 0;
                }
                if (t7 != "")
                {
                    g = Convert.ToInt32(t6);
                }
                else
                {
                    g = 0;
                }

                if ((a > 9 || b > 9 || c > 9 || d > 9 || e > 9 || f > 9 || g > 9))
                {
                    Message = "Extra";
                }
                else if (total == 1)
                {
                    Message = "Extrahours";
                }
                else
                {
                    Message = "";
                }
                int Value1 = a + b + c + d + e + f + g;
                Value = Value1.ToString();
                // int totalweek = weekhours;
                //   string Name1 = totalweek.ToString();

            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Name = Value, Result = Message }, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        public ActionResult TotalHours(string Monday, string Tuesday, string Wednesday, string Thursday, string Friday, string taskid, string task, string text1, string text2, string text3, string text4, string text5, string text6, string text7, string text8, int ProjectId)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var userId = (int)Session["UserId"];
                int id = Convert.ToInt32(taskid);
                DateTime Mon = Convert.ToDateTime(Monday);
                var mon = Mon.Date;
                DateTime Tue = Convert.ToDateTime(Tuesday);
                var tue = Tue.Date;
                DateTime Wed = Convert.ToDateTime(Wednesday);
                var wed = Wed.Date;

                DateTime Thu = Convert.ToDateTime(Thursday);
                var thu = Thu.Date;
                DateTime Fri = Convert.ToDateTime(Friday);
                var fri = Fri.Date;

                var w = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.SelectedEmployess).FirstOrDefault();

                List<int> objuser = new List<int>();
                string[] values = w.Split(',');
                for (int y = 0; y < values.Count(); y++)
                {
                    objuser.Add(Convert.ToInt32(values[y]));
                }


                var k = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == userId).Select(o => o.AssignedTaskId).FirstOrDefault();

                DSRCManagementSystem.TotalWorkingHour objtotal = new DSRCManagementSystem.TotalWorkingHour();
                var val = objdb.TS_Task.Where(x => x.TaskId == id && x.UserId == userId).Select(o => o).FirstOrDefault();
                var month = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == userId).Select(o => o.StartDate).FirstOrDefault();
                var Hour = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == userId).Select(o => o).FirstOrDefault();
                DateTime startdate = Convert.ToDateTime(month);
                var taskmonth = startdate.Month.ToString();
                var already = objdb.TotalWorkingHours.Where(x => x.TaskId == id && x.UserId == userId && x.Approved == 0).Select(o => o).FirstOrDefault();
                // var Approved = objdb.TotalWorkingHours.Where(x => x.TaskId == id && x.UserId == userId && x.Approved == 0).Select(o => o).FirstOrDefault();

                if (val != null)
                {
                    val.IsSave = true;
                }
                objtotal.Task = task;


                DateTime date = Convert.ToDateTime(Monday);
                date = date.Date;
                DateTime firstMonthDay = new DateTime(date.Year, date.Month, 1);
                DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
                if (firstMonthMonday > date)
                {
                    firstMonthDay = firstMonthDay.AddMonths(-1);
                    firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
                }
                int value = (date - firstMonthMonday).Days / 7 + 1;
                string NoofWeek = Convert.ToString(value);

                if (Hour.Isreject == true)
                {
                    Hour.Isreject = false;
                    objdb.SaveChanges();

                }


                if (already != null)
                {
                    if (already.MOndayDate == Mon && already.TuesdayDate == Tue && already.WednesdayDate == Wed && already.ThursdayDate == Thu && already.FridayDate == Fri)
                    {
                        already.SaveDate = System.DateTime.Now;
                        objtotal.Status = false;
                        objtotal.TaskMonth = Convert.ToInt32(taskmonth);
                        objtotal.MOndayDate = mon;
                        objtotal.TuesdayDate = tue;
                        objtotal.WednesdayDate = wed;
                        objtotal.Approved = 0;
                        objtotal.ThursdayDate = thu;
                        objtotal.FridayDate = fri;
                        objtotal.TaskWeek = NoofWeek;
                        objtotal.AssignTaskId = Convert.ToInt32(k);
                        Hour.Isreject = false;
                        objdb.SaveChanges();
                        if (text1 != "")
                        {
                            already.Monday = text1;

                            objdb.SaveChanges();
                        }
                        else
                        {
                            already.Monday = "0";
                        }
                        if (text2 != "")
                        {
                            already.Tuesday = text2;
                            objdb.SaveChanges();
                        }
                        else
                        {
                            already.Tuesday = text2 = "0";
                        }
                        if (text3 != "")
                        {
                            already.Wednesday = text3;
                            objdb.SaveChanges();
                        }
                        else
                        {
                            already.Wednesday = "0";
                        }
                        if (text4 != "")
                        {
                            already.Thursday = text4;
                            objdb.SaveChanges();
                        }
                        else
                        {
                            already.Thursday = "0";
                        }
                        if (text5 != "")
                        {
                            already.Friday = text5;
                            objdb.SaveChanges();
                        }
                        else
                        {
                            already.Friday = "0";
                        }
                        if (objtotal.Total != "")
                        {
                            already.Total = text8;
                        }
                        else
                        {
                            already.Total = "0";
                        }

                        if (text1 == "0" && text2 == "0" && text3 == "0" && text4 == "0" && text5 == "0")
                        {
                            text8 = "0";
                            already.Total = "0";
                        }

                        objdb.SaveChanges();
                        return Json(new { Result = "Already", JsonRequestBehavior.AllowGet });
                    }
                    else
                    {
                        objtotal.SaveDate = System.DateTime.Now;
                        objtotal.Status = false;
                        objtotal.TaskMonth = Convert.ToInt32(taskmonth);
                        objtotal.MOndayDate = mon;
                        objtotal.TuesdayDate = tue;
                        objtotal.WednesdayDate = wed;
                        objtotal.ThursdayDate = thu;
                        objtotal.FridayDate = fri;
                        objtotal.TaskWeek = NoofWeek;
                        objtotal.Approved = 0;
                        objtotal.AssignTaskId = Convert.ToInt32(k);
                        objdb.SaveChanges();
                        if (ProjectId != 0)
                        {
                            objtotal.ProjectId = ProjectId;
                        }

                        if (taskid != "")
                        {
                            objtotal.TaskId = Convert.ToInt32(taskid);
                        }
                        if (userId != 0)
                        {
                            objtotal.UserId = userId;
                        }
                        if (text1 != "")
                        {
                            objtotal.Monday = text1;
                        }
                        else
                        {
                            objtotal.Monday = "0";
                        }
                        if (text2 != "")
                        {
                            objtotal.Tuesday = text2;
                        }
                        else
                        {
                            objtotal.Tuesday = "0";
                        }
                        if (text3 != "")
                        {
                            objtotal.Wednesday = text3;
                        }
                        else
                        {
                            objtotal.Wednesday = "0";
                        }
                        if (text4 != "")
                        {
                            objtotal.Thursday = text4;
                        }
                        else
                        {
                            objtotal.Thursday = "0";
                        }
                        if (text5 != "")
                        {
                            objtotal.Friday = text5;
                        }
                        else
                        {
                            objtotal.Friday = "0";
                        }
                        if (text6 != "")
                        {
                            objtotal.Saturday = text6;
                        }
                        else
                        {
                            objtotal.Saturday = "0";
                        }
                        if (text7 != "")
                        {
                            objtotal.Sunday = text7;
                        }
                        else
                        {
                            objtotal.Sunday = "0";
                        }

                        if (objtotal.Total != "")
                        {
                            objtotal.Total = text8;
                        }
                        else
                        {
                            objtotal.Total = "0";
                        }
                        if (text1 == "0" && text2 == "0" && text3 == "0" && text4 == "0" && text5 == "0")
                        {
                            text8 = "0";
                            objtotal.Total = "0";
                        }

                        Hour.Isreject = false;
                        objdb.AddToTotalWorkingHours(objtotal);
                        objdb.SaveChanges();
                        ViewData["Save"] = 1;
                        return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
                    }

                }

                else
                {
                    objtotal.SaveDate = System.DateTime.Now;
                    objtotal.Status = false;
                    objtotal.TaskMonth = Convert.ToInt32(taskmonth);
                    objtotal.MOndayDate = mon;
                    objtotal.TuesdayDate = tue;
                    objtotal.WednesdayDate = wed;
                    objtotal.ThursdayDate = thu;
                    objtotal.FridayDate = fri;
                    objtotal.Approved = 0;
                    objtotal.TaskWeek = NoofWeek;
                    objtotal.AssignTaskId = Convert.ToInt32(k);
                    objdb.SaveChanges();
                    if (ProjectId != 0)
                    {
                        objtotal.ProjectId = ProjectId;
                    }

                    if (taskid != "")
                    {
                        objtotal.TaskId = Convert.ToInt32(taskid);
                    }
                    if (userId != 0)
                    {
                        objtotal.UserId = userId;
                    }
                    if (text1 == "0" && text2 == "0" && text3 == "0" && text4 == "0" && text5 == "0")
                    {
                        text8 = "0";
                        objtotal.Total = Convert.ToString(text8);
                    }

                    if (text1 != "")
                    {
                        objtotal.Monday = text1;
                    }
                    else
                    {
                        objtotal.Monday = "0";
                    }
                    if (text2 != "")
                    {
                        objtotal.Tuesday = text2;
                    }
                    else
                    {
                        objtotal.Tuesday = "0";
                    }
                    if (text3 != "")
                    {
                        objtotal.Wednesday = text3;
                    }
                    else
                    {
                        objtotal.Wednesday = "0";
                    }
                    if (text4 != "")
                    {
                        objtotal.Thursday = text4;
                    }
                    else
                    {
                        objtotal.Thursday = "0";
                    }
                    if (text5 != "")
                    {
                        objtotal.Friday = text5;
                    }
                    else
                    {
                        objtotal.Friday = "0";
                    }
                    if (text6 != "")
                    {
                        objtotal.Saturday = text6;
                    }
                    else
                    {
                        objtotal.Saturday = "0";
                    }
                    if (text7 != "")
                    {
                        objtotal.Sunday = text7;
                    }
                    else
                    {
                        objtotal.Sunday = "0";
                    }

                    if (objtotal.Total != "")
                    {
                        objtotal.Total = text8;
                    }
                    else
                    {
                        objtotal.Total = "0";
                    }

                    Hour.Isreject = false;
                    objdb.AddToTotalWorkingHours(objtotal);
                    objdb.SaveChanges();
                    ViewData["Save"] = 1;

                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
        }

        [HttpGet]
        public ActionResult AddTask()
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var Purpose = (from pi in objdb.General_Tasks
                               select new
                               {
                                   Id3 = pi.Id,
                                   Template = pi.GeneralTask
                               }).ToList();
                ViewBag.Purpose = new SelectList(Purpose, "Id3", "Template");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }



        [HttpGet]
        public ActionResult weektotal(int Weeekhours)
        {
            int a = 0;
            try
            {
                
                a += Weeekhours;
                
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Name = a }, JsonRequestBehavior.AllowGet);
        }



        [HttpPost]
        public ActionResult AddTask(AddTask objtask)
        {

            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            DSRCManagementSystem.TS_Task objts = new DSRCManagementSystem.TS_Task();
            try
            {
                var userId = (int)Session["UserId"];
                objts.TaskName = objtask.GeneralTask.ToString();
                objts.UserId = userId;
                objts.IsActice = true;
                objts.TaskStatus = 1;
                objts.ISACTIVE = true;
                objts.NoOfEfforts = 1;
                objts.PhaseName = "Not Allocate";
                objts.PhaseStatus = 1;
                objts.ProjectName = 62;
                objts.IsDelete = false;
                objts.IsOpened = false;
                objts.IsSave = false;
                objts.PhaseNameId = 1;
                objts.StartDate = System.DateTime.Now;
                objts.EndDATE = System.DateTime.Now;
                objdb.AddToTS_Task(objts);
                objdb.SaveChanges();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
        }

        [HttpGet]
        public ActionResult ApprovedTimeSheet(string ProjectId)
        {
            DSRCManagementSystem.Models.ApprovedTimeSheet obj = new DSRCManagementSystem.Models.ApprovedTimeSheet();

            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                int Id = Convert.ToInt32(ProjectId);
                int Id1 = (int)Session["UserId"];
                var team = (from p in objdb.Master_TSR_Members
                            select new
                            {
                                Id = p.Id,
                                Name = p.Value
                            }).ToList();

                var Weeks = (from p in objdb.Master_TS_Week
                             select new
                             {
                                 Id = p.Id,
                                 Week = p.WeeK
                             }).ToList();

                if (ProjectId != null)
                {
                    var Users = (from p in objdb.UserProjects.Where(x => x.ProjectID == Id)
                                 join t in objdb.Users.Where(x => x.UserID != Id1) on p.UserID equals t.UserID
                                 select new ApprovedTimeSheet
                                 {
                                     UserId = p.UserID,
                                     UserName = t.FirstName + "." + t.LastName
                                 }).ToList();
                    ViewBag.User = new MultiSelectList(Users, "UserId", "UserName");

                    obj.Multiselect = 1;
                }
                else
                {
                    obj.Multiselect = 0;
                }

                if (ProjectId != null)
                {
                    ViewBag.ProjectList = new SelectList(LoadProjects(), "ProjectID", "ProjectName", ProjectId);
                }

                else
                {
                    ViewBag.ProjectList = new SelectList(LoadProjects(), "ProjectID", "ProjectName");
                }
                ViewBag.Team = new SelectList(team, "Id", "Name", 1);
                ViewBag.Weeks = new SelectList(Weeks, "Id", "Week");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }

            return View(obj);
        }

        [HttpGet]
        public ActionResult ApprovedTimeSheetManagement(int? ProjectId, string UserId, string Week)
        {
            DSRCManagementSystem.Models.StudentModel obj = new DSRCManagementSystem.Models.StudentModel();
            try
            {
                List<int?> objuser = new List<int?>();
                string[] values = UserId.Split(',');
                for (int y = 0; y < values.Count(); y++)
                {
                    objuser.Add(Convert.ToInt32(values[y]));
                }
                var userId = (int)Session["UserId"];
                var date = DateTime.Now;

                //  int User = Convert.ToInt32(UserId);


                TempData["AddTaskButton"] = UserId;
                TempData["AddTaskButtonProjectId"] = ProjectId;

                //   Session["User"] = Convert.ToInt32(UserId);

                //var Start = Convert.ToDateTime(StartDate);
                //var End = Convert.ToDateTime(EndDate);

                DateTime beginningOfMonth = new DateTime(date.Year, date.Month, 1);

                while (date.Date.AddDays(1).DayOfWeek != CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek)
                    date = date.AddDays(1);

                var result = (int)Math.Truncate((double)date.Subtract(beginningOfMonth).TotalDays / 7f) + 1;

                var firstdateofweek = DateTime.Now;
                var cal = System.Globalization.DateTimeFormatInfo.CurrentInfo.Calendar;
                Dictionary<string, DateTime> currentWeek = new Dictionary<string, DateTime>();
                Dictionary<string, DateTime> nextWeek = new Dictionary<string, DateTime>();

                var weekofYear = cal.GetWeekOfYear(DateTime.Now, System.Globalization.CalendarWeekRule.FirstDay, System.DayOfWeek.Monday);
                firstdateofweek = FirstDateOfWeek(DateTime.Now.Year, weekofYear, CultureInfo.CurrentCulture);
                int i = 0;
                while (i != 12) // skiped weeekend days...
                {
                    if (i < 7)
                        currentWeek.Add(firstdateofweek.AddDays(i).DayOfWeek.ToString(), firstdateofweek.AddDays(i).Date);
                    else if (i >= 7)
                        nextWeek.Add(firstdateofweek.AddDays(i).DayOfWeek.ToString(), firstdateofweek.AddDays(i).Date);

                    i++;
                }

                int k = currentWeek.Count();



                if (Week != "" && Week != null)
                {
                    int weekno = Convert.ToInt32(Week);

                    //Getting The Screen For Current Week

                    if (weekno == 1)
                    {
                        if (result % 2 != 0)
                        {
                            DateTime? MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                                    .Select(pair => pair.Value)
                                    .FirstOrDefault();


                            DateTime? TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();


                            DateTime? WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            DateTime? ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            DateTime? FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            DateTime? SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();


                            DateTime? SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();




                            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();




                            List<taskName> task = new List<taskName>();

                            //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                            //        select new DSRCManagementSystem.Models.taskName
                            //        {
                            //            id = p.TaskId,
                            //            taskname = p.TaskName
                            //        }).ToList();


                            var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                            DateTime? start1 = MondayDate1;
                            DateTime? start2 = TuesDayDate1;
                            DateTime? start3 = WednesDayDate1;
                            DateTime? start4 = ThursDayDate1;
                            DateTime? start5 = FridayDate1;


                            var objint = db.UserReportings.Where(x => x.ReportingUserID == userId).Select(o => o.UserID).ToList();



                            //task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees)  && x.ProjectId == ProjectId && x.ISdelete != true  && x.Isreject != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1)|| (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) ))
                            //       // join w in db.TS_Task on p.TaskName equals w.TaskId
                            //        join t in db.Users on p.Employees equals t.UserID
                            //        join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 ) on p.TaskName equals ts.TaskId into yg
                            //        from y1 in yg.DefaultIfEmpty()
                            //        select new DSRCManagementSystem.Models.taskName 
                            //        {
                            //            id = y1.TaskId,
                            //            taskname =y1.Task ,
                            //            Monday = y1.Monday,
                            //            Tuesday = y1.Tuesday,
                            //            Wednesday = y1.Wednesday,
                            //            Thursday = y1.Thursday,
                            //            Friday = y1.Friday,
                            //            Total = y1.Total,
                            //            ProjectId = p.ProjectId,
                            //            UserName = t.FirstName + "." + t.LastName,
                            //            UserId = y1.UserId
                            //        }).ToList();

                            ApprovedTimeSheet sheet = new ApprovedTimeSheet();

                            //task = (from p in db.TS_AssignedTask.Where(x =>  x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1)))
                            //        // join w in db.TS_Task on p.TaskName equals w.TaskId
                            //        join t in db.Users on p.Employees equals t.UserID
                            //        join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5) on p.TaskName equals ts.TaskId
                            //        where (objuser.Contains(p.Employees) && objuser.Contains(ts.UserId))

                            //        select new DSRCManagementSystem.Models.taskName
                            //        {
                            //            id = ts.TaskId,
                            //            taskname = ts.Task,
                            //            Monday = ts.Monday,
                            //            Tuesday = ts.Tuesday,
                            //            Wednesday = ts.Wednesday,
                            //            Thursday = ts.Thursday,
                            //            Friday = ts.Friday,
                            //            Total = ts.Total,
                            //            ProjectId = p.ProjectId,
                            //            UserName = t.FirstName + "." + t.LastName,
                            //            UserId = ts.UserId
                            //        }).ToList();



                            task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate > MondayDate1 && x.StartDate < FridayDate1 && x.EndDate > FridayDate1)))
                                    join t in db.Projects on p.ProjectId equals t.ProjectID
                                    join w in db.Users on p.Employees equals w.UserID
                                    join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                    select new DSRCManagementSystem.Models.taskName
                                    {
                                        id = ts.TaskId,
                                        taskname = ts.Task,
                                        Monday = ts.Monday,
                                        Tuesday = ts.Tuesday,
                                        Wednesday = ts.Wednesday,
                                        Thursday = ts.Thursday,
                                        Friday = ts.Friday,
                                        Total = ts.Total,
                                        ProjectId = p.ProjectId,
                                        UserName = w.FirstName + " " + w.LastName,
                                        UserId = ts.UserId
                                    }).ToList();






                            //   task = (from p in db.TS_AssignedTask.Where(x => x.Employees == User && x.ProjectId == ProjectId && x.ISdelete != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1
                            //) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1)))
                            //           join t in db.Users on p.Employees equals t.UserID
                            //           join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start3 && x.FridayDate == start4) on p.Employees equals ts.UserId into yg
                            //           from y1 in yg.DefaultIfEmpty()
                            //           select new DSRCManagementSystem.Models.taskName
                            //           {

                            //               id = y1.TaskId,
                            //               taskname = y1.Task,
                            //               Monday = y1.Monday,
                            //               Tuesday = y1.Tuesday,
                            //               Wednesday = y1.Wednesday,
                            //               Thursday = y1.Thursday,
                            //               Friday = y1.Friday,
                            //               Total = y1.Total,
                            //               ProjectId = y1.ProjectId,
                            //               UserName = t.FirstName + "." + t.LastName,
                            //               UserId = t.UserID


                            //           }).ToList();



                            int u = 0;

                            for (k = 0; k < task.Count(); k++)
                            {
                                if (task[k].Total != "")
                                {
                                    u += Convert.ToInt32(task[k].Total);
                                }
                            }

                            obj.Weekhours = u;
                            DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                            List<string> week = new List<string>();
                            //week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == User && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();





                            //int number = week.Count();
                            //int z = 0;
                            //for (int v = 0; v < number; v++)
                            //{
                            //    z += Convert.ToInt32(week[v]);
                            //}




                            if (task.Count() == 0)
                            {

                                int taskcount = task.Count();
                                obj.Count = taskcount;

                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        UserName = task[t].UserName
                                    });
                                }

                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                                return View(obj);
                            }

                            if (task.Count() != 0)
                            {
                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();


                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }





                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });

                                var w = n.Count();


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                                // Holiday
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }



                                //Leave
                                //int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays > 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                //Out of office


                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => x.ODStartDate == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                else
                                {

                                }

                            }

                            // List<WeekDetails> details=new List<WeekDetails>();

                            // details = (from ts in db.TS_TimeSheetTotalHours
                            //            where ts.UserId == 49 && ts.SaveDate >= MondayDate1 && ts.SaveDate <= FridayDate1
                            //            select new WeekDetails()
                            //            {
                            //                Monday = ts.Monday,
                            //                Tuesday = ts.Tuesday,
                            //                Wednesday = ts.Wednesday,
                            //                Thursday = ts.Thursday,
                            //                Friday = ts.Friday,
                            //                Total = ts.Total
                            //            }).ToList();

                            //foreach (WeekDetails w in details)
                            //{
                            //    obj.StudentList[0].Monday = w.Monday;
                            //    obj.StudentList[1].Tuesday = w.Tuesday;
                            //    obj.StudentList[2].Wednesday = w.Wednesday;
                            //    obj.StudentList[3].Thursday = w.Thursday;
                            //    obj.StudentList[4].Friday = w.Friday;
                            //    obj.StudentList[5].Total = Convert.ToInt32(w.Total);
                            //}

                            //int y = 0;

                            //for (int x = 0; x < task.Count(); x++)
                            //{
                            //    y += Convert.ToInt32(obj.StudentList[6].Total);
                            //}
                            //obj.Weekhours = y;
                            //return View(obj);
                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {

                                y += Convert.ToInt32(obj.StudentList[6].Total);

                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }
                                else
                                {
                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;
                        }

                        else
                        {
                            var MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();


                            var TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();


                            var WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            var ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            var FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            var SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();


                            var SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                                   .Select(pair => pair.Value)
                                   .FirstOrDefault();

                            DateTime? start1 = MondayDate1;
                            DateTime? start2 = TuesDayDate1;
                            DateTime? start3 = WednesDayDate1;
                            DateTime? start4 = ThursDayDate1;
                            DateTime? start5 = FridayDate1;

                            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

                            List<taskName> task = new List<taskName>();
                            var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();

                            //List<int> objint = new List<int>();
                            var objint = db.UserReportings.Where(x => x.ReportingUserID == userId).Select(o => o.UserID).ToList();



                            task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > MondayDate1 && x.EndDate <= FridayDate1) || (x.StartDate < MondayDate1 && x.EndDate > FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate >= MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate == MondayDate1 && x.EndDate >= FridayDate1) || (x.StartDate > MondayDate1 && x.StartDate < FridayDate1 && x.EndDate > FridayDate1)))
                                    join w in db.Users on p.Employees equals w.UserID
                                    join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Status != true && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                    select new DSRCManagementSystem.Models.taskName
                                    {
                                        id = ts.TaskId,
                                        taskname = ts.Task,
                                        Monday = ts.Monday,
                                        Tuesday = ts.Tuesday,
                                        Wednesday = ts.Wednesday,
                                        Thursday = ts.Thursday,
                                        Friday = ts.Friday,
                                        Total = ts.Total,
                                        ProjectId = p.ProjectId,
                                        UserName = w.FirstName + "," + w.LastName,
                                        UserId = ts.UserId
                                    }).ToList();









                            if (task.Count() == 0)
                            {

                                int taskcount = task.Count();
                                obj.Count = taskcount;

                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }

                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                                return View(obj);
                            }









                            DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                            List<string> week = new List<string>();
                            week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();

                            int number = week.Count();
                            int a = 0;
                            for (int v = 0; v < number; v++)
                            {
                                a += Convert.ToInt32(week[v]);
                            }

                            //    obj.Weekhours = z;


                            int u = 0;

                            for (k = 0; k < task.Count(); k++)
                            {
                                if (task[k].Total != "")
                                {
                                    u += Convert.ToInt32(task[k].Total);
                                }
                            }

                            obj.Weekhours = u;




                            if (task.Count() != 0)
                            {



                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();
                                obj.Count = taskcount;

                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }



                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();

                                //holiday

                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }


                                //int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays > 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                //Out of office


                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) & x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }
                            }

                            else
                            {
                                int taskcount = task.Count();
                                obj.Count = taskcount;

                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        UserName = task[t].UserName
                                    });
                                }

                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                                return View(obj);
                            }
                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {
                                y += Convert.ToInt32(obj.StudentList[6].Total);
                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }
                                else
                                {

                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;
                            return View(obj);
                        }


                    }





                    // Getting THe Screen  For  Previous Week

                    if (weekno == 2)
                    {
                        var Date = DateTime.Now;
                        var date1 = Date.Date;
                        DateTime mondayOfLastWeek = date1.AddDays(-(int)date1.DayOfWeek - 6);
                        string Monday = mondayOfLastWeek.ToString();
                        var MonDay1 = Convert.ToDateTime(Monday);
                        var MonDay = MonDay1.Date;
                        var TuesDay1 = Convert.ToDateTime(Monday).AddDays(1);
                        var TuesDay = TuesDay1.Date;
                        var WednesDay1 = Convert.ToDateTime(Monday).AddDays(2);
                        var WednesDay = WednesDay1.Date;
                        var ThursDay1 = Convert.ToDateTime(Monday).AddDays(3);
                        var ThursDay = ThursDay1.Date;
                        var FriDay1 = Convert.ToDateTime(Monday).AddDays(4);
                        var FriDay = FriDay1.Date;
                        var SaturDay1 = Convert.ToDateTime(Monday).AddDays(5);
                        var SaturDay = SaturDay1.Date;
                        var SunDay1 = Convert.ToDateTime(Monday).AddDays(6);
                        var SunDay = SunDay1.Date;
                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();
                        DateTime? start1 = MonDay;
                        DateTime? start2 = TuesDay;
                        DateTime? start3 = WednesDay;
                        DateTime? start4 = ThursDay;
                        DateTime? start5 = FriDay;



                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();


                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                        //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                        //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId=p.ProjectName
                        //        }).ToList();


                        task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                                join w in db.Users on p.Employees equals w.UserID
                                join ts in db.TotalWorkingHours.Where(x => objuser.Contains(x.UserId) && x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Status != true && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    id = ts.TaskId,
                                    taskname = ts.Task,
                                    Monday = ts.Monday,
                                    Tuesday = ts.Tuesday,
                                    Wednesday = ts.Wednesday,
                                    Thursday = ts.Thursday,
                                    Friday = ts.Friday,
                                    Total = ts.Total,
                                    ProjectId = p.ProjectId,
                                    UserName = w.FirstName + "," + w.LastName,
                                    UserId = ts.UserId
                                }).ToList();










                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    ProjectId = task[t].ProjectId,
                                    UserName = task[t].UserName,
                                    UserId = task[t].UserId
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                            //  LastWeek = "";
                            return View(obj);
                        }

                        else
                        {

                            if (task.Count() != 0)
                            {
                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();


                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {


                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }





                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                                var w = n.Count();


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                                // Holiday
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }



                                //Leave
                                //      int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays > 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                //Out of office

                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                else
                                {

                                }

                            }


                            //int y = 0;

                            //for (int x = 0; x < task.Count(); x++)
                            //{
                            //    y += Convert.ToInt32(obj.StudentList[6].Total);
                            //}
                            //obj.Weekhours = y;

                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {
                                y += Convert.ToInt32(obj.StudentList[6].Total);
                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }

                                else
                                {

                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;


                            return View(obj);

                        }


                    }

                        // Gettting THe Screen For Previous Week1

                    else if (weekno == 3)
                    {


                        var Date = DateTime.Now;
                        var date1 = Date.Date;
                        DateTime mondayOfLastWeek = date1.AddDays(-(int)date1.DayOfWeek - 17);
                        string Monday = mondayOfLastWeek.ToString();
                        var MonDay1 = Convert.ToDateTime(Monday);
                        var MonDay = MonDay1.Date;
                        var TuesDay1 = Convert.ToDateTime(Monday).AddDays(1);
                        var TuesDay = TuesDay1.Date;
                        var WednesDay1 = Convert.ToDateTime(Monday).AddDays(2);
                        var WednesDay = WednesDay1.Date;
                        var ThursDay1 = Convert.ToDateTime(Monday).AddDays(3);
                        var ThursDay = ThursDay1.Date;
                        var FriDay1 = Convert.ToDateTime(Monday).AddDays(4);
                        var FriDay = FriDay1.Date;
                        var SaturDay1 = Convert.ToDateTime(Monday).AddDays(5);
                        var SaturDay = SaturDay1.Date;
                        var SunDay1 = Convert.ToDateTime(Monday).AddDays(6);
                        var SunDay = SunDay1.Date;
                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();


                        DateTime? start1 = MonDay;
                        DateTime? start2 = TuesDay;
                        DateTime? start3 = WednesDay;
                        DateTime? start4 = ThursDay;
                        DateTime? start5 = FriDay;


                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();


                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                        //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                        //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId=p.ProjectName
                        //        }).ToList();


                        task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                                join w in db.Users on p.Employees equals w.UserID
                                join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Status != true && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    id = ts.TaskId,
                                    taskname = ts.Task,
                                    Monday = ts.Monday,
                                    Tuesday = ts.Tuesday,
                                    Wednesday = ts.Wednesday,
                                    Thursday = ts.Thursday,
                                    Friday = ts.Friday,
                                    Total = ts.Total,
                                    ProjectId = p.ProjectId,
                                    UserName = w.FirstName + "," + w.LastName,
                                    UserId = ts.UserId
                                }).ToList();















                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    ProjectId = task[t].ProjectId,
                                    UserName = task[t].UserName,
                                    UserId = task[t].UserId
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                            //  LastWeek = "";
                            return View(obj);
                        }

                        else
                        {

                            if (task.Count() != 0)
                            {
                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();


                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }





                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                                var w = n.Count();


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                                // Holiday
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }



                                // int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                //Out of office


                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }
                                else
                                {

                                }

                            }

                            ////int y = 0;

                            ////for (int x = 0; x < task.Count(); x++)
                            ////{
                            ////    y += Convert.ToInt32(obj.StudentList[6].Total);
                            ////}
                            ////obj.Weekhours = y;
                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {
                                y += Convert.ToInt32(obj.StudentList[6].Total);
                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }
                                else
                                {
                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;


                            return View(obj);

                        }




                    }


                        //Getting The Screen For Previous Week 2

                    else if (weekno == 4)
                    {

                        var Date = DateTime.Now;
                        var date1 = Date.Date;
                        DateTime mondayOfLastWeek = date1.AddDays(-(int)date1.DayOfWeek - 20);
                        string Monday = mondayOfLastWeek.ToString();
                        var MonDay1 = Convert.ToDateTime(Monday);
                        var MonDay = MonDay1.Date;
                        var TuesDay1 = Convert.ToDateTime(Monday).AddDays(1);
                        var TuesDay = TuesDay1.Date;
                        var WednesDay1 = Convert.ToDateTime(Monday).AddDays(2);
                        var WednesDay = WednesDay1.Date;
                        var ThursDay1 = Convert.ToDateTime(Monday).AddDays(3);
                        var ThursDay = ThursDay1.Date;
                        var FriDay1 = Convert.ToDateTime(Monday).AddDays(4);
                        var FriDay = FriDay1.Date;
                        var SaturDay1 = Convert.ToDateTime(Monday).AddDays(5);
                        var SaturDay = SaturDay1.Date;
                        var SunDay1 = Convert.ToDateTime(Monday).AddDays(6);
                        var SunDay = SunDay1.Date;
                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

                        DateTime? start1 = MonDay;
                        DateTime? start2 = TuesDay;
                        DateTime? start3 = WednesDay;
                        DateTime? start4 = ThursDay;
                        DateTime? start5 = FriDay;



                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();


                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                        //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                        //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId=p.ProjectName
                        //        }).ToList();






                        task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                                join w in db.Users on p.Employees equals w.UserID
                                join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Status != true && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    id = ts.TaskId,
                                    taskname = ts.Task,
                                    Monday = ts.Monday,
                                    Tuesday = ts.Tuesday,
                                    Wednesday = ts.Wednesday,
                                    Thursday = ts.Thursday,
                                    Friday = ts.Friday,
                                    Total = ts.Total,
                                    ProjectId = p.ProjectId,
                                    UserName = w.FirstName + "," + w.LastName,
                                    UserId = ts.UserId
                                }).ToList();




                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    ProjectId = task[t].ProjectId,
                                    UserName = task[t].UserName,
                                    UserId = task[t].UserId
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                            //  LastWeek = "";
                            return View(obj);
                        }

                        else
                        {

                            if (task.Count() != 0)
                            {
                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();


                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }





                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                                var w = n.Count();


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                                // Holiday
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }



                                //   int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                //Out of office


                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                else
                                {

                                }

                            }

                            //int y = 0;

                            //for (int x = 0; x < task.Count(); x++)
                            //{
                            //    y += Convert.ToInt32(obj.StudentList[6].Total);
                            //}
                            //obj.Weekhours = y;
                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {
                                y += Convert.ToInt32(obj.StudentList[6].Total);
                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }
                                else
                                {
                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;

                            return View(obj);

                        }





                    }

                // Getting THe Screen For Previous Week3
                    else if (weekno == 5)
                    {
                        var Date = DateTime.Now;
                        var date1 = Date.Date;
                        DateTime mondayOfLastWeek = date1.AddDays(-(int)date1.DayOfWeek - 27);
                        string Monday = mondayOfLastWeek.ToString();
                        var MonDay1 = Convert.ToDateTime(Monday);
                        var MonDay = MonDay1.Date;
                        var TuesDay1 = Convert.ToDateTime(Monday).AddDays(1);
                        var TuesDay = TuesDay1.Date;
                        var WednesDay1 = Convert.ToDateTime(Monday).AddDays(2);
                        var WednesDay = WednesDay1.Date;
                        var ThursDay1 = Convert.ToDateTime(Monday).AddDays(3);
                        var ThursDay = ThursDay1.Date;
                        var FriDay1 = Convert.ToDateTime(Monday).AddDays(4);
                        var FriDay = FriDay1.Date;
                        var SaturDay1 = Convert.ToDateTime(Monday).AddDays(5);
                        var SaturDay = SaturDay1.Date;
                        var SunDay1 = Convert.ToDateTime(Monday).AddDays(6);
                        var SunDay = SunDay1.Date;
                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();


                        DateTime? start1 = MonDay;
                        DateTime? start2 = TuesDay;
                        DateTime? start3 = WednesDay;
                        DateTime? start4 = ThursDay;
                        DateTime? start5 = FriDay;


                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();


                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();


                        //task = (from p in db.TS_Task.Where(x => x.StartDate >=MondayDate1 && x.EndDATE<=FridayDate1 ) 
                        //        join w in db.TS_AssignedTask on p.UserId  equals w.Employees
                        //        join ts in db.TotalWorkingHours on p.TaskId equals ts.TaskId into yg
                        //        from y1 in yg.DefaultIfEmpty()
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName,
                        //            Monday = y1.Monday,
                        //            Tuesday = y1.Tuesday,
                        //            Wednesday = y1.Wednesday,
                        //            Thursday = y1.Thursday,
                        //            Friday = y1.Friday,
                        //            Total = y1.Total,
                        //            ProjectId=p.ProjectName
                        //        }).ToList();






                        task = (from p in db.TS_AssignedTask.Where(x => objuser.Contains(x.Employees) && x.ProjectId == ProjectId && x.ISdelete != true && x.Isreject != true && ((x.StartDate >= MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > MonDay && x.EndDate <= FriDay) || (x.StartDate < MonDay && x.EndDate > FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate >= MonDay && x.EndDate >= FriDay) || (x.StartDate == MonDay && x.EndDate >= FriDay) || (x.StartDate > MonDay && x.StartDate < FriDay && x.EndDate > FriDay)))
                                join w in db.Users on p.Employees equals w.UserID
                                join ts in db.TotalWorkingHours.Where(x => x.MOndayDate == start1 && x.TuesdayDate == start2 && x.WednesdayDate == start3 && x.ThursdayDate == start4 && x.FridayDate == start5 && x.Status != true && x.Approved == 0) on p.AssignedTaskId equals ts.AssignTaskId
                                select new DSRCManagementSystem.Models.taskName
                                {
                                    id = ts.TaskId,
                                    taskname = ts.Task,
                                    Monday = ts.Monday,
                                    Tuesday = ts.Tuesday,
                                    Wednesday = ts.Wednesday,
                                    Thursday = ts.Thursday,
                                    Friday = ts.Friday,
                                    Total = ts.Total,
                                    ProjectId = p.ProjectId,
                                    UserName = w.FirstName + "," + w.LastName,
                                    UserId = ts.UserId
                                }).ToList();


















                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MonDay && x.SaveDate <= FriDay).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    ProjectId = task[t].ProjectId,
                                    UserName = task[t].UserName,
                                    UserId = task[t].UserId
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });
                            //  LastWeek = "";
                            return View(obj);
                        }

                        else
                        {

                            if (task.Count() != 0)
                            {
                                var ram = task[0].taskname.ToString();
                                var taskid = task[0].id;

                                int taskcount = task.Count();


                                List<Taskname> objtotal = new List<Taskname>();

                                obj.TaskName = objtotal;


                                for (int t = 0; t < taskcount; t++)
                                {

                                    objtotal.Add(new Taskname
                                    {
                                        Task = task[t].taskname.ToString(),
                                        id = task[t].id,
                                        Monday = task[t].Monday,
                                        Tuesday = task[t].Tuesday,
                                        Wednesday = task[t].Wednesday,
                                        Thursday = task[t].Thursday,
                                        Friday = task[t].Friday,
                                        Total = task[t].Total,
                                        ProjectId = task[t].ProjectId,
                                        UserName = task[t].UserName,
                                        UserId = task[t].UserId
                                    });
                                }





                                List<Student> n = new List<Student>();
                                obj.StudentList = n;
                                n.Add(new Student() { MondayValue = 0, MondayDate = MonDay, Total = null, Mondayday = "Monday" });
                                n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDay, Total = null, Tuesdayday = "Tuesday" });
                                n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDay, Total = null, Wednesdayday = "Wednesday" });
                                n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDay, Total = null, Thursdayday = "Thursday" });
                                n.Add(new Student() { FridayValue = 5, FridayDate = FriDay, Total = null, Fridayday = "Friday" });
                                n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDay, Total = null, Saturdayday = "Saturday" });
                                n.Add(new Student() { SundayValue = 7, Sundaydate = SunDay, Total = null, Sundayday = "Sunday" });

                                var w = n.Count();


                                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                                // Holiday
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[0].mondayholiday = true;

                                    }
                                }



                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[1].Tuesdayholiday = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[2].Wednesdayholiday = true;

                                    }
                                }




                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].Thursdayholiday = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[4].Fridayholiday = true;

                                    }
                                }



                                //  int User = Convert.ToInt32(UserId);


                                //leave
                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday5 != null || overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays > 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;
                                    var holiday = objdb.LeaveRequests.Where(x => x.StartDateTime == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;

                                    var holiday1 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                    var holiday3 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) == val && objuser.Contains(x.UserId) && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.LeaveRequests.Where(x => EntityFunctions.TruncateTime(x.StartDateTime) <= val && EntityFunctions.TruncateTime(x.EndDateTime) >= val && objuser.Contains(x.UserId) && x.LeaveDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayLeave = true;
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                    }

                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayLeave = true;
                                        obj.StudentList[1].TuesDayLeave = true;
                                        obj.StudentList[2].WednesdayLeave = true;
                                        obj.StudentList[3].ThursdayLeave = true;
                                        obj.StudentList[4].FridayLeave = true;

                                    }
                                }

                                //Out of office


                                if (obj.StudentList[0].MondayDate != null)
                                {
                                    DateTime? val = obj.StudentList[0].MondayDate;
                                    //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();
                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue;
                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }

                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[1].TuesdayDate != null)
                                {
                                    DateTime? val = obj.StudentList[1].TuesdayDate;

                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) & x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue;

                                    }

                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[2].WednesDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[2].WednesDayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();


                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;

                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }


                                if (obj.StudentList[3].ThursDayDate != null)
                                {
                                    DateTime? val = obj.StudentList[3].ThursDayDate;


                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue;

                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                if (obj.StudentList[4].FridayDate != null)
                                {
                                    DateTime? val = obj.StudentList[4].FridayDate;
                                    var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                    var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                    var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                    var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                    var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && objuser.Contains(x.Userid) && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                    var overall = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(EntityFunctions.TruncateTime(x.ODStartDate)) <= val && EntityFunctions.TruncateTime(x.ODEndDate) >= val && objuser.Contains(x.Userid) && x.ODWorkingDays >= 5).Select(o => o).FirstOrDefault();

                                    if (holiday1 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue;
                                    }
                                    if (holiday2 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue;
                                    }
                                    if (holiday3 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        // obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                    }
                                    if (holiday4 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        // obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                    }
                                    if (holiday5 != null)
                                    {
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[4].FridayOutValue + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                    }
                                    if (overall != null)
                                    {
                                        obj.StudentList[0].MondayOut = true;
                                        obj.StudentList[1].TuesdayOut = true;
                                        obj.StudentList[2].WednesdayOut = true;
                                        obj.StudentList[3].ThursadyOut = true;
                                        obj.StudentList[4].FridayOut = true;
                                        obj.StudentList[3].ThursdayOutValue = 9;
                                        obj.StudentList[4].FridayOutValue = 9;
                                        obj.StudentList[0].MondayOutValue = 9;
                                        obj.StudentList[1].TuesdayOutValue = 9;
                                        obj.StudentList[2].WednesdayOutValue = 9;
                                        obj.StudentList[6].Total = obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[4].FridayOutValue;


                                    }
                                }

                                else
                                {

                                }

                            }


                            //int y = 0;

                            //for (int x = 0; x < task.Count(); x++)
                            //{
                            //    y += Convert.ToInt32(obj.StudentList[6].Total);
                            //}
                            //obj.Weekhours = y;
                            int y = 0;
                            int l = 0;
                            for (int x = 0; x < task.Count(); x++)
                            {
                                y += Convert.ToInt32(obj.StudentList[6].Total);
                            }

                            foreach (var item in task)
                            {
                                if (item.Total != "")
                                {
                                    l += Convert.ToInt32(item.Total);
                                }

                                else
                                {
                                    l = 0;
                                }
                            }
                            obj.Weekhours = y + l;

                            return View(obj);

                        }


                    }

                }


                else
                {
                    // Getting the screen for Current Week
                    if (result % 2 != 0)
                    {
                        var MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                                .Select(pair => pair.Value)
                                .FirstOrDefault();


                        var TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();




                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();




                        List<taskName> task = new List<taskName>();

                        //task = (from p in db.TS_Task.Where(x => x.StartDate >= MondayDate1 && x.EndDATE <= FridayDate1 && x.UserId == userId  && x.IsSave== false)
                        //        select new DSRCManagementSystem.Models.taskName
                        //        {
                        //            id = p.TaskId,
                        //            taskname = p.TaskName
                        //        }).ToList();


                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();





                        var objint = db.UserReportings.Where(x => x.ReportingUserID == userId).Select(o => o.UserID).ToList();


                        for (int z = 0; z < objuser.Count; z++)
                        {
                            task = (from p in db.TS_AssignedTask.Where(x => x.Employees == objuser[z] && x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1 && x.ISdelete != true)
                                    join w in db.TS_Task on p.TaskName equals w.TaskId
                                    join ts in db.TotalWorkingHours.Where(x => x.UserId == objuser[z]) on w.TaskId equals ts.TaskId into yg
                                    from y1 in yg.DefaultIfEmpty()
                                    select new DSRCManagementSystem.Models.taskName
                                    {
                                        id = w.TaskId,
                                        taskname = w.TaskName,
                                        Monday = y1.Monday,
                                        Tuesday = y1.Tuesday,
                                        Wednesday = y1.Wednesday,
                                        Thursday = y1.Thursday,
                                        Friday = y1.Friday,
                                        Total = y1.Total,
                                        ProjectId = w.ProjectName
                                    }).ToList();
                        }

                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;
                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();





                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }




                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    UserName = task[t].UserName
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }

                        if (task.Count() != 0)
                        {
                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();


                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    UserName = task[t].UserName
                                });
                            }





                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });

                            var w = n.Count();


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();









                            // Holiday
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }



                            //Leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;

                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault(); var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                }
                            }


                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;

                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;


                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                }
                            }

                            else
                            {

                            }

                        }

                        // List<WeekDetails> details=new List<WeekDetails>();

                        // details = (from ts in db.TS_TimeSheetTotalHours
                        //            where ts.UserId == 49 && ts.SaveDate >= MondayDate1 && ts.SaveDate <= FridayDate1
                        //            select new WeekDetails()
                        //            {
                        //                Monday = ts.Monday,
                        //                Tuesday = ts.Tuesday,
                        //                Wednesday = ts.Wednesday,
                        //                Thursday = ts.Thursday,
                        //                Friday = ts.Friday,
                        //                Total = ts.Total
                        //            }).ToList();

                        //foreach (WeekDetails w in details)
                        //{
                        //    obj.StudentList[0].Monday = w.Monday;
                        //    obj.StudentList[1].Tuesday = w.Tuesday;
                        //    obj.StudentList[2].Wednesday = w.Wednesday;
                        //    obj.StudentList[3].Thursday = w.Thursday;
                        //    obj.StudentList[4].Friday = w.Friday;
                        //    obj.StudentList[5].Total = Convert.ToInt32(w.Total);
                        //}


                        return View(obj);
                    }
                    else
                    {
                        var MondayDate1 = currentWeek.Where(pair => pair.Key == "Monday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var TuesDayDate1 = currentWeek.Where(pair => pair.Key == "Tuesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var WednesDayDate1 = currentWeek.Where(pair => pair.Key == "Wednesday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var ThursDayDate1 = currentWeek.Where(pair => pair.Key == "Thursday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var FridayDate1 = currentWeek.Where(pair => pair.Key == "Friday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();

                        var SaturDayDate1 = currentWeek.Where(pair => pair.Key == "Saturday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();


                        var SunDayDate1 = currentWeek.Where(pair => pair.Key == "Sunday")
                               .Select(pair => pair.Value)
                               .FirstOrDefault();



                        DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

                        List<taskName> task = new List<taskName>();
                        var ProjectUserid = db.UserReportings.Where(x => x.UserID == userId).Select(o => o.ReportingUserID).FirstOrDefault();

                        //List<int> objint = new List<int>();
                        var objint = db.UserReportings.Where(x => x.ReportingUserID == userId).Select(o => o.UserID).ToList();

                        for (int z = 0; z < objuser.Count; z++)
                        {
                            task = (from p in db.TS_AssignedTask.Where(x => x.Employees == objuser[z] && x.StartDate >= MondayDate1 && x.EndDate <= FridayDate1 && x.ISdelete != true)
                                    join w in db.TS_Task on p.TaskName equals w.TaskId
                                    join ts in db.TotalWorkingHours.Where(x => x.UserId == objuser[z]) on w.TaskId equals ts.TaskId into yg
                                    from y1 in yg.DefaultIfEmpty()
                                    select new DSRCManagementSystem.Models.taskName
                                    {
                                        id = w.TaskId,
                                        taskname = w.TaskName,
                                        Monday = y1.Monday,
                                        Tuesday = y1.Tuesday,
                                        Wednesday = y1.Wednesday,
                                        Thursday = y1.Thursday,
                                        Friday = y1.Friday,
                                        Total = y1.Total,
                                        ProjectId = w.ProjectName
                                    }).ToList();
                        }

                        if (task.Count() == 0)
                        {

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    UserName = task[t].UserName
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }









                        DSRCManagementSystemEntities1 odb = new DSRCManagementSystemEntities1();
                        List<string> week = new List<string>();
                        week = odb.TS_TimeSheetTotalHours.Where(x => x.UserId == userId && x.SaveDate >= MondayDate1 && x.SaveDate <= FridayDate1).Select(o => o.Total).ToList();

                        int number = week.Count();
                        int a = 0;
                        for (int v = 0; v < number; v++)
                        {
                            a += Convert.ToInt32(week[v]);
                        }

                        //    obj.Weekhours = z;


                        int u = 0;

                        for (k = 0; k < task.Count(); k++)
                        {
                            if (task[k].Total != "")
                            {
                                u += Convert.ToInt32(task[k].Total);
                            }
                        }

                        obj.Weekhours = u;




                        if (task.Count() != 0)
                        {



                            var ram = task[0].taskname.ToString();
                            var taskid = task[0].id;

                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    UserName = task[t].UserName
                                });
                            }



                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });


                            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();

                            //holiday

                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[0].mondayholiday = true;

                                }
                            }



                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[1].Tuesdayholiday = true;

                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[2].Wednesdayholiday = true;

                                }
                            }




                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].Thursdayholiday = true;

                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday = objdb.Master_holiday.Where(x => x.Date == val).Select(o => o.Date).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[4].Fridayholiday = true;

                                }
                            }

                            //leave
                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1;

                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();

                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;
                                var holiday = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();
                                if (holiday != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayLeave1;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[3].ThursdayLeave1 + obj.StudentList[4].FridayLeave1;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;

                                var holiday1 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 2).Select(o => o).FirstOrDefault();

                                var holiday3 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.LeaveRequests.Where(x => x.StartDateTime == val && x.UserId == userId && x.LeaveStatusId == 2 && x.LeaveDays == 5).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayLeave = true;
                                    obj.StudentList[0].MondayLeave = true;
                                    obj.StudentList[1].TuesDayLeave = true;
                                    obj.StudentList[2].WednesdayLeave = true;
                                    obj.StudentList[3].ThursdayLeave = true;
                                    obj.StudentList[4].FridayLeave1 = 9;
                                    obj.StudentList[0].MondayLeave1 = 9;
                                    obj.StudentList[1].TuesDayLeave1 = 9;
                                    obj.StudentList[2].WednesdayLeave1 = 9;
                                    obj.StudentList[3].ThursdayLeave1 = 9;
                                    obj.StudentList[6].Total = obj.StudentList[4].FridayLeave1 + obj.StudentList[0].MondayLeave1 + obj.StudentList[1].TuesDayLeave1 + obj.StudentList[2].WednesdayLeave1 + obj.StudentList[3].ThursdayLeave1;
                                }
                            }



                            //Out of office


                            if (obj.StudentList[0].MondayDate != null)
                            {
                                DateTime? val = obj.StudentList[0].MondayDate;
                                //   var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.UserId == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[0].MondayOutValue;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue;
                                }

                                if (holiday3 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[0].MondayOutValue + obj.StudentList[1].TuesdayOutValue + obj.StudentList[2].WednesdayOutValue + obj.StudentList[3].ThursdayOutValue + obj.StudentList[3].FridayOutValue;
                                }
                            }


                            if (obj.StudentList[1].TuesdayDate != null)
                            {
                                DateTime? val = obj.StudentList[1].TuesdayDate;

                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                }

                                if (holiday2 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                }
                            }


                            if (obj.StudentList[2].WednesDayDate != null)
                            {
                                DateTime? val = obj.StudentList[2].WednesDayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                if (holiday1 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[6].Total = obj.StudentList[6].Total + obj.StudentList[2].WednesdayOutValue;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                }
                            }


                            if (obj.StudentList[3].ThursDayDate != null)
                            {
                                DateTime? val = obj.StudentList[3].ThursDayDate;


                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();

                                if (holiday1 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;

                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                    obj.StudentList[4].FridayOutValue = 9;
                                }
                            }

                            if (obj.StudentList[4].FridayDate != null)
                            {
                                DateTime? val = obj.StudentList[4].FridayDate;
                                var holiday1 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 1).Select(o => o).FirstOrDefault();
                                var holiday2 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.ODWorkingDays == 2 && x.RequestStatusId == 2).Select(o => o).FirstOrDefault();
                                var holiday3 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 3).Select(o => o).FirstOrDefault();
                                var holiday4 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 4).Select(o => o).FirstOrDefault();
                                var holiday5 = objdb.OutOfOfficeDetails.Where(x => EntityFunctions.TruncateTime(x.ODStartDate) == val && x.Userid == userId && x.RequestStatusId == 2 && x.ODWorkingDays == 5).Select(o => o).FirstOrDefault();


                                if (holiday1 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                }
                                if (holiday2 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                }
                                if (holiday3 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                }
                                if (holiday4 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[4].FridayOutValue = 9;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                }
                                if (holiday5 != null)
                                {
                                    obj.StudentList[4].FridayOut = true;
                                    obj.StudentList[0].MondayOut = true;
                                    obj.StudentList[1].TuesdayOut = true;
                                    obj.StudentList[2].WednesdayOut = true;
                                    obj.StudentList[3].ThursadyOut = true;
                                    obj.StudentList[0].MondayOutValue = 9;
                                    obj.StudentList[1].TuesdayOutValue = 9;
                                    obj.StudentList[2].WednesdayOutValue = 9;
                                    obj.StudentList[3].ThursdayOutValue = 9;
                                }
                            }
                        }

                        else
                        {
                            int taskcount = task.Count();
                            obj.Count = taskcount;

                            List<Taskname> objtotal = new List<Taskname>();

                            obj.TaskName = objtotal;


                            for (int t = 0; t < taskcount; t++)
                            {

                                objtotal.Add(new Taskname
                                {
                                    Task = task[t].taskname.ToString(),
                                    id = task[t].id,
                                    Monday = task[t].Monday,
                                    Tuesday = task[t].Tuesday,
                                    Wednesday = task[t].Wednesday,
                                    Thursday = task[t].Thursday,
                                    Friday = task[t].Friday,
                                    Total = task[t].Total,
                                    UserName = task[t].UserName
                                });
                            }

                            List<Student> n = new List<Student>();
                            obj.StudentList = n;
                            n.Add(new Student() { MondayValue = 0, MondayDate = MondayDate1, Total = null, Mondayday = "Monday" });
                            n.Add(new Student() { TuesdayValue = 1, TuesdayDate = TuesDayDate1, Total = null, Tuesdayday = "Tuesday" });
                            n.Add(new Student() { WednesdayValue = 2, WednesDayDate = WednesDayDate1, Total = null, Wednesdayday = "Wednesday" });
                            n.Add(new Student() { ThursdayValue = 3, ThursDayDate = ThursDayDate1, Total = null, Thursdayday = "Thursday" });
                            n.Add(new Student() { FridayValue = 5, FridayDate = FridayDate1, Total = null, Fridayday = "Friday" });
                            n.Add(new Student() { SaturdayValue = 6, SaturDayDate = SaturDayDate1, Total = null, Saturdayday = "Saturday" });
                            n.Add(new Student() { SundayValue = 7, Sundaydate = SunDayDate1, Total = null, Sundayday = "Sunday" });
                            return View(obj);
                        }


                        return View(obj);
                    }

                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View(obj);
        }


        public static DateTime FirstDateOfWeek2(int year, int weekOfYear, System.Globalization.CultureInfo ci)
        {
            DateTime jan1 = new DateTime(year, 1, 1);
            int daysOffset = (int)ci.DateTimeFormat.FirstDayOfWeek - (int)jan1.DayOfWeek;
            DateTime firstWeekDay = jan1.AddDays(daysOffset);
            int firstWeek = ci.Calendar.GetWeekOfYear(jan1, ci.DateTimeFormat.CalendarWeekRule, ci.DateTimeFormat.FirstDayOfWeek);
            if (firstWeek <= 1 || firstWeek > 50)
            {
                weekOfYear -= 1;
            }
            return firstWeekDay.AddDays(weekOfYear * 7);
        }


        [HttpGet]
        public ActionResult ApprovedTotal(string t1, string t2, string t3, string t4, string t5, string t6, string t7, int total)
        {
            string Value = "";
            string Message = "";
            try
            {

                int a, b, c, d, e, f, g;
                if (t1 != "" && t2 == "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);

                }

                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    c = Convert.ToInt32(t3);
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }



                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }


                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }

                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }

                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }

                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);

                }


                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }

                else
                {
                    a = 0;
                    // weekhours += a;
                }



                if (t2 != "" && t1 != "" && t3 == "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    // weekhours +=   b;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {
                    b = 0;
                    d = 0;
                    e = 0;
                    a = Convert.ToInt32(t1);
                    c = Convert.ToInt32(t3);

                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }

                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else
                {
                    b = 0;
                    //  weekhours +=  b;
                }



                if (t3 != "" && t1 != "" && t2 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    // weekhours += c;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 == "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else
                {
                    c = 0;
                    // weekhours += c;
                }



                if (t4 != "" && t1 != "" && t2 != "" && t3 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    // weekhours +=   d;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 == "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else
                {
                    d = 0;
                    //  weekhours += d;
                }

                if (t5 != "" && t1 != "" && t2 != "" && t3 != "" && t4 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                    //  weekhours  += e;
                }
                else if (t1 != "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 != "")
                {

                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = Convert.ToInt32(t5);
                }
                else if (t1 != "" && t2 != "" && t3 == "" && t4 == "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = 0;
                    d = 0;
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 == "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = 0;
                    e = 0;

                }
                else if (t1 == "" && t2 != "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 == "" && t2 == "" && t3 != "" && t4 != "" && t5 != "")
                {
                    a = 0;
                    b = 0;
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 == "" && t3 == "" && t4 != "" && t5 != "")
                {
                    a = Convert.ToInt32(t1);
                    b = 0;
                    c = 0;
                    d = Convert.ToInt32(t4);
                    e = Convert.ToInt32(t5);

                }
                else if (t1 != "" && t2 != "" && t3 != "" && t4 != "" && t5 == "")
                {
                    a = Convert.ToInt32(t1);
                    b = Convert.ToInt32(t2);
                    c = Convert.ToInt32(t3);
                    d = Convert.ToInt32(t4);
                    e = 0;

                }
                else
                {
                    e = 0;
                    //  weekhours +=  e;
                }
                if (t6 != "")
                {
                    f = Convert.ToInt32(t6);
                }
                else
                {
                    f = 0;
                }
                if (t7 != "")
                {
                    g = Convert.ToInt32(t6);
                }
                else
                {
                    g = 0;
                }

                if ((a > 9 || b > 9 || c > 9 || d > 9 || e > 9 || f > 9 || g > 9))
                {
                    Message = "Extra";
                }
                else if (total == 1)
                {
                    Message = "Extrahours";
                }
                else
                {
                    Message = "";
                }
                int Value1 = a + b + c + d + e + f + g;
                Value = Value1.ToString();
                // int totalweek = weekhours;
                //   string Name1 = totalweek.ToString();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Name = Value, Result = Message }, JsonRequestBehavior.AllowGet);
        }




        [HttpPost]
        public ActionResult ApprovedTotalHours(string userid, string Monday, string Tuesday, string Wednesday, string Thursday, string Friday, string taskid, string task, string text1, string text2, string text3, string text4, string text5, string text6, string text7, string text8)
        {
            try
            {
                var userId = (int)Session["UserId"];
                int id = Convert.ToInt32(taskid);
                int User = Convert.ToInt32(userid);
                DateTime Mon = Convert.ToDateTime(Monday);
                var mon = Mon.Date;
                DateTime Tue = Convert.ToDateTime(Tuesday);
                var tue = Tue.Date;
                DateTime Wed = Convert.ToDateTime(Wednesday);
                var wed = Wed.Date;

                DateTime Thu = Convert.ToDateTime(Thursday);
                var thu = Thu.Date;
                DateTime Fri = Convert.ToDateTime(Friday);
                var fri = Fri.Date;

                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();

                var w = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.SelectedEmployess).FirstOrDefault();

                List<int> objuser = new List<int>();
                string[] values = w.Split(',');
                for (int y = 0; y < values.Count(); y++)
                {
                    objuser.Add(Convert.ToInt32(values[y]));
                }


                DSRCManagementSystem.TotalWorkingHour objtotal = new DSRCManagementSystem.TotalWorkingHour();
                var val = objdb.TS_Task.Where(x => x.TaskId == id).Select(o => o).FirstOrDefault();
                var month = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == User && x.ISdelete != true).Select(o => o.StartDate).FirstOrDefault();
                DateTime startdate = Convert.ToDateTime(month);
                var taskmonth = startdate.Month.ToString();
                var already = objdb.TotalWorkingHours.Where(x => x.TaskId == id && x.UserId == User && x.Approved == 0).Select(o => o).FirstOrDefault();
                val.IsSave = true;
                objtotal.Task = task;

                var k = objdb.TotalWorkingHours.Where(x => x.TaskId == id && x.UserId == User && x.Approved == 0).Select(o => o.AssignTaskId).FirstOrDefault();

                var d = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == User).Select(o => o).FirstOrDefault();

                var Hour = objdb.TS_AssignedTask.Where(x => x.TaskName == id && objuser.Contains(User)).Select(o => o).FirstOrDefault();

                var Value = objdb.TotalWorkingHours.Where(x => x.AssignTaskId == id && x.UserId == User && x.Approved == 0).Select(o => o).FirstOrDefault();

                var Approved = objdb.TotalWorkingHours.Where(x => x.AssignTaskId == k && x.UserId == User && x.Approved == 0).Select(o => o).FirstOrDefault();

                if (Hour != null)
                {
                    Hour.Approved = true;
                    Hour.Isreject = false;
                    Hour.Reason = null;
                    Hour.RejectedUserId = null;
                    Hour.RejectedDate = null;
                    objdb.SaveChanges();
                }

                if (Value != null)
                {
                    Value.Approved = 1;
                    objdb.SaveChanges();
                }

                DateTime date = Convert.ToDateTime(System.DateTime.Now);
                date = date.Date;
                DateTime firstMonthDay = new DateTime(date.Year, date.Month, 1);
                DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
                if (firstMonthMonday > date)
                {
                    firstMonthDay = firstMonthDay.AddMonths(-1);
                    firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
                }
                int value = (date - firstMonthMonday).Days / 7 + 1;
                string NoofWeek = Convert.ToString(value);

                int CurrentUser = int.Parse(Session["UserID"].ToString());





                if (already != null)
                {
                    objtotal.MOndayDate = mon;
                    objtotal.TuesdayDate = tue;
                    objtotal.WednesdayDate = wed;
                    objtotal.ThursdayDate = thu;
                    objtotal.FridayDate = fri;
                    already.SaveDate = System.DateTime.Now;
                    already.Status = true;
                    d.Isreject = false;
                    d.Approved = true;
                    Approved.Approved = 1;
                    objtotal.TaskMonth = Convert.ToInt32(taskmonth);
                    objtotal.TaskWeek = NoofWeek;
                    objtotal.AssignTaskId = Convert.ToInt32(k);
                    objdb.SaveChanges();
                    if (text1 != "")
                    {
                        already.Monday = text1;
                        objdb.SaveChanges();
                    }
                    else
                    {
                        already.Monday = "0";
                    }
                    if (text2 != "")
                    {
                        already.Tuesday = text2;
                        objdb.SaveChanges();
                    }
                    else
                    {
                        already.Tuesday = text2 = "0";
                    }
                    if (text3 != "")
                    {
                        already.Wednesday = text3;
                        objdb.SaveChanges();
                    }
                    else
                    {
                        already.Wednesday = "0";
                    }
                    if (text4 != "")
                    {
                        already.Thursday = text4;
                        objdb.SaveChanges();
                    }
                    else
                    {
                        already.Thursday = "0";
                    }
                    if (text5 != "")
                    {
                        already.Friday = text5;
                        objdb.SaveChanges();
                    }
                    else
                    {
                        already.Friday = "0";
                    }
                    if (objtotal.Total != "")
                    {
                        already.Total = text8;
                    }
                    else
                    {
                        already.Total = "0";
                    }

                     var check = objdb.EmailTemplates.Where(x => x.TemplatePurpose == "Workinghours Approved").Select(o => o.EmailTemplateID).FirstOrDefault(); 
                     var folder= objdb.EmailTemplates.Where(o=> o.TemplatePurpose == "Workinghours Approved").Select(x=> x.TemplatePath).FirstOrDefault();
                     if ((check != null) && (check != 0))
                     {
                         var objWorkinghoursRejectedApproved = (from p in objdb.EmailPurposes.Where(x => x.EmailPurposeName == "Workinghours Approved")
                                                                join q in objdb.EmailTemplates on p.EmailTemplateID equals q.EmailTemplateID
                                                                select new DSRCManagementSystem.Models.Email
                                                                {
                                                                    To = p.To,
                                                                    CC = p.CC,
                                                                    BCC = p.BCC,
                                                                    Subject = p.Subject,
                                                                    Template = q.TemplatePath
                                                                }).FirstOrDefault();

                         objWorkinghoursRejectedApproved.To = objdb.Users.Where(x => x.UserID == User).Select(o => o.UserName).FirstOrDefault();
                         var Name = objdb.Users.Where(x => x.UserID == User).Select(o => o).FirstOrDefault();

                         var Manager = objdb.Users.Where(x => x.UserID == CurrentUser).Select(o => o).FirstOrDefault();

                         var TaskName = objdb.TS_Task.Where(x => x.TaskId == id).Select(o => o.TaskName).FirstOrDefault();

                         DateTime? start = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.StartDate).FirstOrDefault();

                         string StartTime = Convert.ToDateTime(start).ToString("ddd, MMM d, yyyy");

                         DateTime? end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.EndDate).FirstOrDefault();

                         string EndTime = Convert.ToDateTime(end).ToString("ddd, MMM d, yyyy");

                         // var end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o).FirstOrDefault();

                         //DateTime StartDate = EntityFunctions.TruncateTime(start);
                         //var EndDate = EntityFunctions.TruncateTime(end);


                         var RejectedDate = System.DateTime.Now;

                         //  var Reason = obj.Reason;

                         string TemplatePathobjworkinghoursRejected = Server.MapPath(objWorkinghoursRejectedApproved.Template);

                         string htmlworkinghours = System.IO.File.ReadAllText(TemplatePathobjworkinghoursRejected);

                         htmlworkinghours = htmlworkinghours.Replace("#EmployeeName", Name.FirstName + "" + Name.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#ManagerName", Manager.FirstName + " " + Manager.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#Task", TaskName);
                         htmlworkinghours = htmlworkinghours.Replace("#StartDateTime", StartTime);
                         htmlworkinghours = htmlworkinghours.Replace("#EndDateTime", EndTime);
                         // htmlworkinghours = htmlworkinghours.Replace("#Comments", Reason);
                         htmlworkinghours = htmlworkinghours.Replace("#Date", DateTime.Today.ToString("dd MMM yyyy"));
                         htmlworkinghours = htmlworkinghours.Replace("#ServerName", WebConfigurationManager.AppSettings["SeverName"]);

                         string EmailAddress = "";
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         var logo = CommonLogic.getLogoPath();

                         if (ServerName == "http://localhost:5555/")
                         {
                             List<string> MailIds = new List<string>();

                             //MailIds.Add("boobalan.k@dsrc.co.in");
                             //MailIds.Add("shaikhakeel@dsrc.co.in");
                             //MailIds.Add("ramesh.s@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");
                             //MailIds.Add(objWorkinghoursRejectedApproved.To);
                             //   MailIds.Add("francispaul.k.c@dsrc.co.in");
                             MailIds.Add("ramesh.s@dsrc.co.in");
                             // MailIds.Add("aruna.m@dsrc.co.in");
                             // MailIds.Add("Virupaksha.Gaddad@dsrc.co.in");
                             // MailIds.Add("kirankumar@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");

                             foreach (string mail in MailIds)
                             {
                                 EmailAddress += mail + ",";
                             }

                             EmailAddress = EmailAddress.Remove(EmailAddress.Length - 1);

                             Task.Factory.StartNew(() =>
                             {
                                 // var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 //DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.ToString()));
                             });
                         }
                         else
                         {

                             Task.Factory.StartNew(() =>
                             {
                                 //var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 //DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.ToString()));
                             });
                         }
                     }
                     else
                     {
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         ExceptionHandlingController.TemplateMissing("Workinghours Approved", folder, ServerName);
                     }


                    return Json(new { Result = "Already", JsonRequestBehavior.AllowGet });
                }

                else
                {
                    objtotal.SaveDate = System.DateTime.Now;
                    objtotal.Status = true;
                    objtotal.TaskMonth = Convert.ToInt32(taskmonth);
                    objtotal.MOndayDate = mon;
                    objtotal.TuesdayDate = tue;
                    objtotal.WednesdayDate = wed;
                    objtotal.ThursdayDate = thu;
                    objtotal.FridayDate = fri;
                    Approved.Approved = 1;
                    d.Isreject = false;
                    d.Approved = true;
                    objtotal.TaskWeek = NoofWeek;
                    objtotal.AssignTaskId = Convert.ToInt32(k);
                    if (taskid != "")
                    {
                        objtotal.TaskId = Convert.ToInt32(taskid);
                    }
                    if (userId != 0)
                    {
                        objtotal.UserId = User;
                    }
                    if (text1 != "")
                    {
                        objtotal.Monday = text1;
                    }
                    else
                    {
                        objtotal.Monday = "0";
                    }
                    if (text2 != "")
                    {
                        objtotal.Tuesday = text2;
                    }
                    else
                    {
                        objtotal.Tuesday = "0";
                    }
                    if (text3 != "")
                    {
                        objtotal.Wednesday = text3;
                    }
                    else
                    {
                        objtotal.Wednesday = "0";
                    }
                    if (text4 != "")
                    {
                        objtotal.Thursday = text4;
                    }
                    else
                    {
                        objtotal.Thursday = "0";
                    }
                    if (text5 != "")
                    {
                        objtotal.Friday = text5;
                    }
                    else
                    {
                        objtotal.Friday = "0";
                    }
                    if (text6 != "")
                    {
                        objtotal.Saturday = text6;
                    }
                    else
                    {
                        objtotal.Saturday = "0";
                    }
                    if (text7 != "")
                    {
                        objtotal.Sunday = text7;
                    }
                    else
                    {
                        objtotal.Sunday = "0";
                    }

                    if (objtotal.Total != "")
                    {
                        objtotal.Total = text8;
                    }
                    else
                    {
                        objtotal.Total = "0";
                    }
                    objdb.AddToTotalWorkingHours(objtotal);
                    objdb.SaveChanges();
                    ViewData["Save"] = 1;

                     var check = objdb.EmailTemplates.Where(x => x.TemplatePurpose == "Workinghours Approved").Select(o => o.EmailTemplateID).FirstOrDefault(); 
                     var folder= objdb.EmailTemplates.Where(o=> o.TemplatePurpose == "Workinghours Approved").Select(x=> x.TemplatePath).FirstOrDefault();
                     if ((check != null) && (check != 0))
                     {
                         var objWorkinghoursRejectedApproved = (from p in objdb.EmailPurposes.Where(x => x.EmailPurposeName == "Workinghours Approved")
                                                                join q in objdb.EmailTemplates on p.EmailTemplateID equals q.EmailTemplateID
                                                                select new DSRCManagementSystem.Models.Email
                                                                {
                                                                    To = p.To,
                                                                    CC = p.CC,
                                                                    BCC = p.BCC,
                                                                    Subject = p.Subject,
                                                                    Template = q.TemplatePath
                                                                }).FirstOrDefault();

                         objWorkinghoursRejectedApproved.To = objdb.Users.Where(x => x.UserID == User).Select(o => o.UserName).FirstOrDefault();
                         var Name = objdb.Users.Where(x => x.UserID == User).Select(o => o).FirstOrDefault();

                         var Manager = objdb.Users.Where(x => x.UserID == CurrentUser).Select(o => o).FirstOrDefault();

                         var TaskName = objdb.TS_Task.Where(x => x.TaskId == id).Select(o => o.TaskName).FirstOrDefault();

                         DateTime? start = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.StartDate).FirstOrDefault();

                         string StartTime = Convert.ToDateTime(start).ToString("ddd, MMM d, yyyy");

                         DateTime? end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.EndDate).FirstOrDefault();

                         string EndTime = Convert.ToDateTime(end).ToString("ddd, MMM d, yyyy");

                         // var end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o).FirstOrDefault();

                         //DateTime StartDate = EntityFunctions.TruncateTime(start);
                         //var EndDate = EntityFunctions.TruncateTime(end);


                         var RejectedDate = System.DateTime.Now;

                         //  var Reason = obj.Reason;

                         string TemplatePathobjworkinghoursRejected = Server.MapPath(objWorkinghoursRejectedApproved.Template);

                         string htmlworkinghours = System.IO.File.ReadAllText(TemplatePathobjworkinghoursRejected);

                         htmlworkinghours = htmlworkinghours.Replace("#EmployeeName", Name.FirstName + "" + Name.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#ManagerName", Manager.FirstName + " " + Manager.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#Task", TaskName);
                         htmlworkinghours = htmlworkinghours.Replace("#StartDateTime", StartTime);
                         htmlworkinghours = htmlworkinghours.Replace("#EndDateTime", EndTime);
                         // htmlworkinghours = htmlworkinghours.Replace("#Comments", Reason);
                         htmlworkinghours = htmlworkinghours.Replace("#Date", DateTime.Today.ToString("dd MMM yyyy"));
                         htmlworkinghours = htmlworkinghours.Replace("#ServerName", WebConfigurationManager.AppSettings["SeverName"]);

                         string EmailAddress = "";
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         var logo = CommonLogic.getLogoPath();

                         if (ServerName == "http://localhost:5555/")
                         {
                             List<string> MailIds = new List<string>();

                             //MailIds.Add("boobalan.k@dsrc.co.in");
                             //MailIds.Add("shaikhakeel@dsrc.co.in");
                             //MailIds.Add("ramesh.s@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");
                             //MailIds.Add(objWorkinghoursRejectedApproved.To);
                             //   MailIds.Add("francispaul.k.c@dsrc.co.in");
                             MailIds.Add("ramesh.s@dsrc.co.in");
                             // MailIds.Add("aruna.m@dsrc.co.in");
                             // MailIds.Add("Virupaksha.Gaddad@dsrc.co.in");
                             // MailIds.Add("kirankumar@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");

                             foreach (string mail in MailIds)
                             {
                                 EmailAddress += mail + ",";
                             }

                             EmailAddress = EmailAddress.Remove(EmailAddress.Length - 1);

                             Task.Factory.StartNew(() =>
                             {
                                 //var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 // DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.ToString()));
                             });
                         }
                         else
                         {

                             Task.Factory.StartNew(() =>
                             {
                                 //var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 //DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.ToString()));
                             });
                         }
                     }
                     else
                     {
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         ExceptionHandlingController.TemplateMissing("Workinghours Approved", folder, ServerName);
                     }
                }
            }

            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
        }


        [HttpGet]
        public ActionResult ApprovedAddTask(string UserId)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var Purpose = (from pi in objdb.General_Tasks
                               select new
                               {
                                   Id3 = pi.Id,
                                   Template = pi.GeneralTask
                               }).ToList();
                ViewBag.Purpose = new SelectList(Purpose, "Id3", "Template");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }
        [HttpGet]
        public ActionResult Approvedweektotal(int Weeekhours)
        {
            int a = 0;
            try
            {

                a += Weeekhours;
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Name = a }, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        public ActionResult ApprovedAddTask(AddTask objtask)
        {
            try
            {

                DateTime input = System.DateTime.Now;
                int delta = DayOfWeek.Monday - input.DayOfWeek;
                DateTime monday = input.AddDays(delta);
                DateTime friday = monday.AddDays(5);

                string Values = TempData["AddTaskButton"].ToString();
                List<int> objuser = new List<int>();
                string[] values = Values.Split(',');
                for (int y = 0; y < values.Count(); y++)
                {
                    objuser.Add(Convert.ToInt32(values[y]));
                }

                // var userId = (int)Session["User"];
                for (int i = 0; i < objuser.Count(); i++)
                {
                    DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                    DSRCManagementSystem.TS_Task objts = new DSRCManagementSystem.TS_Task();
                    objts.TaskName = objtask.GeneralTask.ToString();
                    // objts.UserId = userId;
                    objts.UserId = objuser[i];
                    objts.IsActice = true;
                    objts.TaskStatus = 1;
                    objts.ISACTIVE = true;
                    objts.NoOfEfforts = 1;
                    objts.PhaseName = "Not Allocate";
                    objts.PhaseStatus = 1;
                    objts.ProjectName = Convert.ToInt32(TempData["AddTaskButtonProjectId"]);
                    objts.IsDelete = false;
                    objts.IsOpened = false;
                    objts.IsSave = false;
                    objts.PhaseNameId = 1;
                    objts.StartDate = monday;
                    objts.EndDATE = friday;
                    objdb.AddToTS_Task(objts);

                    objdb.SaveChanges();


                    DSRCManagementSystem.TS_AssignedTask obj = new DSRCManagementSystem.TS_AssignedTask();
                    obj.ProjectId = Convert.ToInt32(TempData["AddTaskButtonProjectId"]);
                    obj.PhaseName = 1;
                    obj.TaskName = objts.TaskId;
                    obj.Employees = objuser[i];
                    obj.NoOfEfforts = 1;
                    obj.Isreject = false;
                    obj.Approved = false;
                    obj.StartDate = monday;
                    obj.EndDate = friday;
                    obj.TaskStatus = 1;
                    obj.IsActive = true;
                    obj.ISdelete = false;
                    objdb.AddToTS_AssignedTask(obj);
                    objdb.SaveChanges();
                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
        }


        public ActionResult CurrentWeek()
        {
            string Monday = null;

            return Json(Monday, JsonRequestBehavior.AllowGet);
        }

        public ActionResult PreviousWeek()
        {
            string Monday = "";
            try
            {
                var date = DateTime.Now;
                var date1 = date.Date;
                DateTime mondayOfLastWeek = date1.AddDays(-(int)date1.DayOfWeek - 6);
                DateTime mondayOfLastWeek1 = date1.AddDays(-(int)date1.DayOfWeek - 13);
                DateTime mondayOfLastWeek2 = date1.AddDays(-(int)date1.DayOfWeek - 20);
                DateTime mondayOfLastWeek3 = date1.AddDays(-(int)date1.DayOfWeek - 27);
                Monday = mondayOfLastWeek.ToString();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(Monday, JsonRequestBehavior.AllowGet);


        }

        public ActionResult PreviousWeek1()
        {

            string Monday = "";
            try
            {
                var date = DateTime.Now;
                var date1 = date.Date;
                DateTime mondayOfLastWeek1 = date1.AddDays(-(int)date1.DayOfWeek - 13);

                Monday = mondayOfLastWeek1.ToString();
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(Monday, JsonRequestBehavior.AllowGet);


        }

        public ActionResult PreviousWeek2()
        {

            string Monday = "";
            try
            {
                var date = DateTime.Now;
                var date1 = date.Date;

                DateTime mondayOfLastWeek2 = date1.AddDays(-(int)date1.DayOfWeek - 20);

                Monday = mondayOfLastWeek2.ToString();

            }

            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(Monday, JsonRequestBehavior.AllowGet);

        }


        public ActionResult PreviousWeek3()
        {
            string Monday = "";
            try
            {
                var date = DateTime.Now;
                var date1 = date.Date;

                DateTime mondayOfLastWeek3 = date1.AddDays(-(int)date1.DayOfWeek - 27);

                Monday = mondayOfLastWeek3.ToString();


            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            // return RedirectToAction("TimeSheetManagement", "TSR", new { LastWeek = Monday });
            return Json(Monday, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Datechange(string Date)
        {
            //DateTime date = Convert.ToDateTime(Date);
            //date = date.Date;
            //DateTime firstMonthDay = new DateTime(date.Year, date.Month, 1);
            //DateTime firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
            //if (firstMonthMonday > date)
            //{
            //    firstMonthDay = firstMonthDay.AddMonths(-1);
            //    firstMonthMonday = firstMonthDay.AddDays((DayOfWeek.Monday + 7 - firstMonthDay.DayOfWeek) % 7);
            //}
            // int value = (date - firstMonthMonday).Days / 7 + 1;
            // string NoofWeek = Convert.ToString(value);

            return Json(Date, JsonRequestBehavior.AllowGet);

        }

        [AcceptVerbs(HttpVerbs.Get)]
        public ActionResult PhaseName(int pid)
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

            IEnumerable<SelectListItem> phasenamelist = new List<SelectListItem>();
            try
            {
                if (Convert.ToString(pid) != "--Select--" || pid != 0)
                {
                    phasenamelist = (from p in db.UserProjects.Where(x => x.ProjectID == pid)
                                     join t in db.Users on p.UserID equals t.UserID
                                     select new ApprovedTimeSheet
                                     {
                                         UserId = p.UserID,
                                         UserName = t.FirstName + "." + t.LastName
                                     }).AsEnumerable().Select(m => new SelectListItem() { Value = Convert.ToString(m.UserId), Text = m.UserName });

                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new SelectList(phasenamelist, "Value", "Text"), JsonRequestBehavior.AllowGet);
        }



        private List<Project> LoadProjects()
        {
            List<Project> Projects = new List<Project>();
            try
            {
                using (DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1())
                {
                    int userId = int.Parse(Session["UserID"].ToString());

                    int roleId = db.UserRoles.Where(x => x.UserID == userId).Select(x => x.RoleID).FirstOrDefault();

                    if (roleId == 44)
                    {
                        var projectId = db.UserProjects.Where(x => x.UserID == userId).Select(x => x.ProjectID).ToList();

                        Projects = (from data in db.Projects
                                    where data.IsActive == true && projectId.Contains(data.ProjectID)
                                    select data).OrderBy(x => x.ProjectName).ToList();
                    }
                    else if (roleId == 4 || roleId == 42 || roleId == 70)
                    {
                        Projects = (from data in db.Projects
                                    join up in db.UserProjects.Where(x => x.UserID == userId) on data.ProjectID equals up.ProjectID
                                    where data.IsActive == true
                                    select data).OrderBy(x => x.ProjectName).ToList();
                    }


                }
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Projects;
        }

        private void ExcelReport(int mon, int Id, int week, List<list> objlist)
        {
            DSRCManagementSystemEntities1 db = new DSRCManagementSystemEntities1();

            DataTable dt = new DataTable();
            AllMail.GetTotalworkinghours(mon, Id, week, dt);
            //SqlParameter[] objParam = new SqlParameter[1];
            //objParam[0] = new SqlParameter("@Month", mon);
            //dt.Fill("SP_GetTotalworkinghours", objParam);

            string sourceFile = Server.MapPath("~/Template/TotalWorkingHours.xlt");
            string ExcelFolder = Server.MapPath("~/TotalWorkingHours/");
            //string ExcelFolder = @"D:\HRMS Latest\DSRCManagementSystem\Employee-ReportingPerson";
            // @"C:\ShareInventoryReports\ExcelSheets\\";
            //Path.GetTempPath();
            // string ExcelFolder = @"C:\ShareInventoryReports\ExcelSheets\\";
            string FileName = "TotalWorkingHours.xls";
            string destFile = ExcelFolder + FileName;

            if (System.IO.File.Exists(sourceFile))
            {
                if (!Directory.Exists(ExcelFolder))
                {
                    Directory.CreateDirectory(ExcelFolder);
                }
                System.IO.File.Copy(sourceFile, destFile, true);
                FileInfo fileInfo = new FileInfo(destFile);
                fileInfo.IsReadOnly = false;
                fileInfo.Refresh();
                CellDataWriterFirstAndOthers(2, 0, dt, destFile, "Sheet1", objlist);

            }


        }


        private void CellDataWriterFirstAndOthers(int row, int col, DataTable dt, string FilePath, string SheetName, List<list> objlist)
        {

            FileStream fs = new FileStream(FilePath, FileMode.Open, FileAccess.ReadWrite);
            HSSFWorkbook templateWorkbook = new HSSFWorkbook(fs);
            HSSFSheet sheet = (HSSFSheet)templateWorkbook.GetSheet(SheetName);
            fs.Close();
            int i = 0;
            int r = row;

            HSSFRow headerRow = (HSSFRow)sheet.CreateRow(2);
            headerRow.RowStyle = templateWorkbook.CreateCellStyle();
            headerRow.RowStyle.Alignment = NPOI.SS.UserModel.HorizontalAlignment.Center;
            headerRow.RowStyle.WrapText = true;
            headerRow.RowStyle.VerticalAlignment = VerticalAlignment.Center;
            IFont font = templateWorkbook.CreateFont();
            font.Boldweight = 3;

            font.FontHeight = 30;
            headerRow.RowStyle.SetFont(font);

            HSSFCell cell = (HSSFCell)headerRow.CreateCell(11);
            for (int k = 0; k < objlist.Count; k++)
            {
                sheet.GetRow(0).GetCell(0).SetCellValue("Employee ID");
                sheet.GetRow(0).GetCell(1).SetCellValue("Name");
                sheet.GetRow(0).GetCell(2).SetCellValue("Project");
                sheet.GetRow(0).GetCell(3).SetCellValue("Phase");
                sheet.GetRow(0).GetCell(4).SetCellValue("Task");
                DateTime monday = Convert.ToDateTime(objlist[k].Monday);
                var Monday = monday.ToString("dd/MM/yyyy");
                sheet.GetRow(0).GetCell(5).SetCellValue(Monday + " " + " " + "Mon");
                DateTime tuesday = Convert.ToDateTime(objlist[k].Tuesday);
                var Tuesday = tuesday.ToString("dd/MM/yyyy");
                sheet.GetRow(0).GetCell(6).SetCellValue(Tuesday + " " + " " + "Tue");
                DateTime wednesday = Convert.ToDateTime(objlist[k].Wednesday);
                var Wednesday = wednesday.ToString("dd/MM/yyyy");
                sheet.GetRow(0).GetCell(7).SetCellValue(Wednesday + " " + " " + "Wed");
                DateTime thursday = Convert.ToDateTime(objlist[k].Thursday);
                var Thursday = thursday.ToString("dd/MM/yyyy");
                sheet.GetRow(0).GetCell(8).SetCellValue(Thursday + " " + " " + "Thu");
                DateTime friday = Convert.ToDateTime(objlist[k].Friday);
                var Friday = friday.ToString("dd/MM/yyyy");
                sheet.GetRow(0).GetCell(9).SetCellValue(Friday + " " + " " + "Fri");
                sheet.GetRow(0).GetCell(10).SetCellValue("TotalHours");
                sheet.GetRow(0).GetCell(11).SetCellValue("");
                sheet.GetRow(0).GetCell(12).SetCellValue("");
                sheet.GetRow(0).GetCell(13).SetCellValue("");

            }
            foreach (DataRow dr in dt.Rows)
            {
                HSSFRow headerRow4 = (HSSFRow)sheet.CreateRow(r);



                int j = 0;

                int c = col;
                foreach (DataColumn dc in dt.Columns)
                {

                    HSSFCell cell1 = (HSSFCell)headerRow4.CreateCell(c);
                    string value = dt.Rows[i][j].ToString();
                    if (value == "0" || value == "0.00")
                    {
                        value = string.Empty;
                    }
                    sheet.GetRow(r).GetCell(c).SetCellValue(value);
                    j++;
                    c++;
                }
                i++;
                r++;
            }


            fs = new FileStream(FilePath, FileMode.Open, FileAccess.ReadWrite);
            templateWorkbook.Write(fs);
            fs.Close();
            dt.Columns.Clear();
            dt.Rows.Clear();
        }


        [HttpGet]
        public ActionResult XlSheet()
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
            try
            {
                var month = (from p in objdb.Master_TSR_Month
                             select new
                             {
                                 MonthId = p.Id,
                                 Months = p.Month
                             }).ToList();

                var week = (from p in objdb.Master_Project_Month_Week
                            select new
                            {
                                WeekId = p.Id,
                                Weeks = p.Week

                            }).ToList();

                ViewBag.Projects = new SelectList(LoadProjects(), "ProjectID", "ProjectName");
                ViewBag.Months = new SelectList(month, "MonthId", "Months");
                ViewBag.Weeks = new SelectList(week, "WeekId", "Weeks");
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }

        [HttpGet]
        public ActionResult RejectedTotalHours(string taskid, string userid)
        {
            try
            {
                int id = Convert.ToInt32(taskid);
                TempData["TaskId"] = id;
                int User = Convert.ToInt32(userid);
                TempData["USER"] = User;
            }
            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return View();
        }



        [HttpPost]
        public ActionResult RejectedTotalHours(Rejected obj)
        {
            try
            {
                int id = Convert.ToInt32(TempData["TaskId"]);
                int User = Convert.ToInt32(TempData["USER"]);
                int CurrentUser = int.Parse(Session["UserID"].ToString());
                DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
                var Hours = objdb.TS_AssignedTask.Where(x => x.TaskName == id && x.Employees == User).Select(o => o).FirstOrDefault();
                var totalworking = objdb.TotalWorkingHours.Where(x => x.TaskId == id && x.UserId == User).Select(o => o).FirstOrDefault();
                if (Hours != null)
                {
                    Hours.RejectedUserId = CurrentUser;
                    Hours.Reason = obj.Reason;
                    Hours.RejectedDate = System.DateTime.Now;
                    Hours.Isreject = true;
                    Hours.Approved = false;
                    totalworking.Status = false;
                    objdb.SaveChanges();
                }

                 var check = objdb.EmailTemplates.Where(x => x.TemplatePurpose == "Workinghours Rejected").Select(o => o.EmailTemplateID).FirstOrDefault(); 
                     var folder= objdb.EmailTemplates.Where(o=> o.TemplatePurpose == "Workinghours Rejected").Select(x=> x.TemplatePath).FirstOrDefault();
                     if ((check != null) && (check != 0))
                     {

                         var objWorkinghoursRejectedApproved = (from p in objdb.EmailPurposes.Where(x => x.EmailPurposeName == "Workinghours Rejected")
                                                                join q in objdb.EmailTemplates on p.EmailTemplateID equals q.EmailTemplateID
                                                                select new DSRCManagementSystem.Models.Email
                                                                {
                                                                    To = p.To,
                                                                    CC = p.CC,
                                                                    BCC = p.BCC,
                                                                    Subject = p.Subject,
                                                                    Template = q.TemplatePath
                                                                }).FirstOrDefault();

                         objWorkinghoursRejectedApproved.To = objdb.Users.Where(x => x.UserID == User).Select(o => o.UserName).FirstOrDefault();

                         var Name = objdb.Users.Where(x => x.UserID == User).Select(o => o).FirstOrDefault();

                         var Manager = objdb.Users.Where(x => x.UserID == CurrentUser).Select(o => o).FirstOrDefault();

                         var TaskName = objdb.TS_Task.Where(x => x.TaskId == id).Select(o => o.TaskName).FirstOrDefault();

                         DateTime? start = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.StartDate).FirstOrDefault();

                         string StartTime = Convert.ToDateTime(start).ToString("ddd, MMM d, yyyy");

                         DateTime? end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o.EndDate).FirstOrDefault();

                         string EndTime = Convert.ToDateTime(end).ToString("ddd, MMM d, yyyy");

                         // var end = objdb.TS_AssignedTask.Where(x => x.TaskName == id).Select(o => o).FirstOrDefault();

                         //DateTime StartDate = EntityFunctions.TruncateTime(start);
                         //var EndDate = EntityFunctions.TruncateTime(end);


                         var RejectedDate = System.DateTime.Now;

                         var Reason = obj.Reason;

                         string TemplatePathobjworkinghoursRejected = Server.MapPath(objWorkinghoursRejectedApproved.Template);

                         string htmlworkinghours = System.IO.File.ReadAllText(TemplatePathobjworkinghoursRejected);



                         htmlworkinghours = htmlworkinghours.Replace("#EmployeeName", Name.FirstName + "" + Name.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#ManagerName", Manager.FirstName + " " + Manager.LastName);
                         htmlworkinghours = htmlworkinghours.Replace("#Task", TaskName);
                         htmlworkinghours = htmlworkinghours.Replace("#StartDateTime", StartTime);
                         htmlworkinghours = htmlworkinghours.Replace("#EndDateTime", EndTime);
                         htmlworkinghours = htmlworkinghours.Replace("#Comments", Reason);
                         htmlworkinghours = htmlworkinghours.Replace("#Date", DateTime.Today.ToString("dd MMM yyyy"));
                         htmlworkinghours = htmlworkinghours.Replace("#ServerName", WebConfigurationManager.AppSettings["SeverName"]);

                         string EmailAddress = "";
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         var logo = CommonLogic.getLogoPath();

                         if (ServerName == "http://localhost:5555/")
                         {
                             List<string> MailIds = new List<string>();

                             //MailIds.Add("boobalan.k@dsrc.co.in");
                             //MailIds.Add("shaikhakeel@dsrc.co.in");
                             //MailIds.Add("ramesh.s@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");
                             //MailIds.Add(objWorkinghoursRejectedApproved.To);
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");
                             //MailIds.Add("ramesh.s@dsrc.co.in");
                             //MailIds.Add("aruna.m@dsrc.co.in");
                             //MailIds.Add("Virupaksha.Gaddad@dsrc.co.in");
                             //MailIds.Add("kirankumar@dsrc.co.in");
                             //MailIds.Add("francispaul.k.c@dsrc.co.in");

                             foreach (string mail in MailIds)
                             {
                                 EmailAddress += mail + ",";
                             }

                             EmailAddress = EmailAddress.Remove(EmailAddress.Length - 1);

                             Task.Factory.StartNew(() =>
                             {
                                 //var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 // DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject + " - Test Mail Please Ignore", null, htmlworkinghours + " - Testing Plaese ignore", "Test-admin@dsrc.co.in", EmailAddress, Server.MapPath(logo.ToString()));
                             });
                         }
                         else
                         {

                             Task.Factory.StartNew(() =>
                             {
                                 //var logo = objdb.Master_ApplicationSettings.Where(x => x.AppID == 7).Select(x => x).FirstOrDefault();
                                 //DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.AppValue.ToString()));
                                 DsrcMailSystem.MailSender.SendMail(null, objWorkinghoursRejectedApproved.Subject, null, htmlworkinghours, "admin@dsrc.co.in", objWorkinghoursRejectedApproved.To, Server.MapPath(logo.ToString()));
                             });
                         }
                     }
                     else
                     {
                         string ServerName = WebConfigurationManager.AppSettings["SeverName"];
                         ExceptionHandlingController.TemplateMissing("Workinghours Rejected", folder, ServerName);
                     }

            }

            catch (Exception Ex)
            {
                string actionName = this.ControllerContext.RouteData.Values["action"].ToString();
                string controllerName = this.ControllerContext.RouteData.Values["controller"].ToString();
                ExceptionHandlingController.ExceptionDetails(Ex, actionName, controllerName);
            }
            return Json(new { Result = "Success", JsonRequestBehavior.AllowGet });
        }

        [HttpGet]

        public ActionResult DataBind(string ProjectId)
        {

            int ID = Convert.ToInt32(ProjectId);

            return Json(ProjectId, JsonRequestBehavior.AllowGet);
        }


        //[HttpGet]
        //public ActionResult Index()
        //{
        //    return View();
        //}

        //[HttpGet ]
        //[ValidateInput(false)]
        //public ActionResult Submit(ContentViewModel model)
        //{
        //    ViewBag.Text = model.Text;
        //    return View();
        //}


        [HttpPost]
        public FileResult XlSheet(excelsheet obj)
        {
            DSRCManagementSystemEntities1 objdb = new DSRCManagementSystemEntities1();
          
                int Month = Convert.ToInt32(obj.Months);
                int? mon = Convert.ToInt32(obj.Months);
                int Project = Convert.ToInt32(obj.Projects);
                int? Pro = Convert.ToInt32(obj.Projects);
                int WeekNUmber = Convert.ToInt32(obj.Weeks);
                int? week = Convert.ToInt32(obj.Weeks);
                List<string> all = new List<string>();
                //  all = objdb.TotalWorkingHours.Where(x => x.ProjectId ==obj.Projects && x.TaskMonth == obj.Months && x.TaskWeek == obj.Weeks).ToList();

                List<DSRCManagementSystem.Models.list> objlist = new List<DSRCManagementSystem.Models.list>();



                if (WeekNUmber != 0)
                {
                    objlist = (from p in objdb.TotalWorkingHours.Where(x => x.ProjectId == Pro && x.TaskMonth == mon && x.TaskWeek == obj.Weeks)
                               select new DSRCManagementSystem.Models.list
                               {

                                   Monday = p.MOndayDate,
                                   Tuesday = p.TuesdayDate,
                                   Wednesday = p.WednesdayDate,
                                   Thursday = p.ThursdayDate,
                                   Friday = p.FridayDate

                               }).Distinct().ToList();
                }

                else
                {
                    objlist = (from p in objdb.TotalWorkingHours.Where(x => x.ProjectId == Pro && x.TaskMonth == mon)
                               select new DSRCManagementSystem.Models.list
                               {

                                   Monday = p.MOndayDate,
                                   Tuesday = p.TuesdayDate,
                                   Wednesday = p.WednesdayDate,
                                   Thursday = p.ThursdayDate,
                                   Friday = p.FridayDate

                               }).Distinct().ToList();
                }




                ExcelReport(Month, Project, WeekNUmber, objlist);
                string filename = Server.MapPath(Url.Content("~/TotalWorkingHours/TotalWorkingHours.xls"));

                string contentType = "application/vnd.ms-excel";
                return new FilePathResult(filename, contentType)
                {
                    FileDownloadName = "TotalWorkingHours" + DateTime.Now.Day.ToString()
                        + '-' + DateTime.Now.Month.ToString()
                        + '-' + DateTime.Now.Year
                        + "_" + DateTime.Now.Hour.ToString()
                        + "-" + DateTime.Now.Minute.ToString()
                        + "-" + DateTime.Now.Second.ToString() + ".xls"
                };

            }
    }
}
